/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: yadel_model.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "org.roylance.yadel"

public enum Org_Roylance_Yadel_OSBitVersion: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case v64BitVersion // = 0
  case v32BitVersion // = 1
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "V_64_BIT_VERSION"),
    1: .same(proto: "V_32_BIT_VERSION"),
  ]

  public init() {
    self = .v64BitVersion
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .v64BitVersion
    case 1: self = .v32BitVersion
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .v64BitVersion: return 0
    case .v32BitVersion: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Org_Roylance_Yadel_OSTypeVersion: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case macOsTypeVersion // = 0
  case winOsTypeVersion // = 1
  case ubuntuOsTypeVersion // = 2
  case centosOsTypeVersion // = 3
  case fedoraOsTypeVersion // = 4
  case redhatOsTypeVersion // = 5
  case linuxOsTypeVersion // = 6
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MAC_OS_TYPE_VERSION"),
    1: .same(proto: "WIN_OS_TYPE_VERSION"),
    2: .same(proto: "UBUNTU_OS_TYPE_VERSION"),
    3: .same(proto: "CENTOS_OS_TYPE_VERSION"),
    4: .same(proto: "FEDORA_OS_TYPE_VERSION"),
    5: .same(proto: "REDHAT_OS_TYPE_VERSION"),
    6: .same(proto: "LINUX_OS_TYPE_VERSION"),
  ]

  public init() {
    self = .macOsTypeVersion
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .macOsTypeVersion
    case 1: self = .winOsTypeVersion
    case 2: self = .ubuntuOsTypeVersion
    case 3: self = .centosOsTypeVersion
    case 4: self = .fedoraOsTypeVersion
    case 5: self = .redhatOsTypeVersion
    case 6: self = .linuxOsTypeVersion
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .macOsTypeVersion: return 0
    case .winOsTypeVersion: return 1
    case .ubuntuOsTypeVersion: return 2
    case .centosOsTypeVersion: return 3
    case .fedoraOsTypeVersion: return 4
    case .redhatOsTypeVersion: return 5
    case .linuxOsTypeVersion: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Org_Roylance_Yadel_WorkerState: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case working // = 0
  case idle // = 1
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WORKING"),
    1: .same(proto: "IDLE"),
  ]

  public init() {
    self = .working
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .working
    case 1: self = .idle
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .working: return 0
    case .idle: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Org_Roylance_Yadel_WorkerToManagerMessageType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case registration // = 0
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REGISTRATION"),
  ]

  public init() {
    self = .registration
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .registration
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .registration: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Org_Roylance_Yadel_ManagerToManagerMessageType: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case ensureWorkersWorking // = 0
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENSURE_WORKERS_WORKING"),
  ]

  public init() {
    self = .ensureWorkersWorking
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ensureWorkersWorking
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ensureWorkersWorking: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Org_Roylance_Yadel_ActorRole: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case manager // = 0
  case worker // = 1
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MANAGER"),
    1: .same(proto: "WORKER"),
  ]

  public init() {
    self = .manager
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .manager
    case 1: self = .worker
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .manager: return 0
    case .worker: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Org_Roylance_Yadel_WorkerOperationsComparison: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case equalsOperation // = 0
  case notEqualsOperation // = 1
  case greaterThanOperation // = 2
  case lessThanOperation // = 3
  case greaterThanOrEqualsOperation // = 4
  case lessThanOrEqualsOperation // = 5
  case containsOperation // = 6
  case matchesOperation // = 7
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EQUALS_OPERATION"),
    1: .same(proto: "NOT_EQUALS_OPERATION"),
    2: .same(proto: "GREATER_THAN_OPERATION"),
    3: .same(proto: "LESS_THAN_OPERATION"),
    4: .same(proto: "GREATER_THAN_OR_EQUALS_OPERATION"),
    5: .same(proto: "LESS_THAN_OR_EQUALS_OPERATION"),
    6: .same(proto: "CONTAINS_OPERATION"),
    7: .same(proto: "MATCHES_OPERATION"),
  ]

  public init() {
    self = .equalsOperation
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .equalsOperation
    case 1: self = .notEqualsOperation
    case 2: self = .greaterThanOperation
    case 3: self = .lessThanOperation
    case 4: self = .greaterThanOrEqualsOperation
    case 5: self = .lessThanOrEqualsOperation
    case 6: self = .containsOperation
    case 7: self = .matchesOperation
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .equalsOperation: return 0
    case .notEqualsOperation: return 1
    case .greaterThanOperation: return 2
    case .lessThanOperation: return 3
    case .greaterThanOrEqualsOperation: return 4
    case .lessThanOrEqualsOperation: return 5
    case .containsOperation: return 6
    case .matchesOperation: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Org_Roylance_Yadel_WorkerConnection: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
  public typealias RawValue = Int
  case none // = 0
  case and // = 1
  case or // = 2
  case UNRECOGNIZED(Int)

  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "AND"),
    2: .same(proto: "OR"),
  ]

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .and
    case 2: self = .or
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .and: return 1
    case .or: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct Org_Roylance_Yadel_WorkerProperty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkerProperty"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
    3: .same(proto: "value"),
    4: .standard(proto: "number_value"),
    5: .standard(proto: "os_bit_version"),
    6: .standard(proto: "os_type_version"),
  ]

  public var id: String = ""

  public var key: String = ""

  public var value: String = ""

  public var numberValue: Double = 0

  public var osBitVersion: Org_Roylance_Yadel_OSBitVersion = Org_Roylance_Yadel_OSBitVersion.v64BitVersion

  public var osTypeVersion: Org_Roylance_Yadel_OSTypeVersion = Org_Roylance_Yadel_OSTypeVersion.macOsTypeVersion

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularStringField(value: &key)
      case 3: try decoder.decodeSingularStringField(value: &value)
      case 4: try decoder.decodeSingularDoubleField(value: &numberValue)
      case 5: try decoder.decodeSingularEnumField(value: &osBitVersion)
      case 6: try decoder.decodeSingularEnumField(value: &osTypeVersion)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if !key.isEmpty {
      try visitor.visitSingularStringField(value: key, fieldNumber: 2)
    }
    if !value.isEmpty {
      try visitor.visitSingularStringField(value: value, fieldNumber: 3)
    }
    if numberValue != 0 {
      try visitor.visitSingularDoubleField(value: numberValue, fieldNumber: 4)
    }
    if osBitVersion != Org_Roylance_Yadel_OSBitVersion.v64BitVersion {
      try visitor.visitSingularEnumField(value: osBitVersion, fieldNumber: 5)
    }
    if osTypeVersion != Org_Roylance_Yadel_OSTypeVersion.macOsTypeVersion {
      try visitor.visitSingularEnumField(value: osTypeVersion, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yadel_WorkerProperty) -> Bool {
    if id != other.id {return false}
    if key != other.key {return false}
    if value != other.value {return false}
    if numberValue != other.numberValue {return false}
    if osBitVersion != other.osBitVersion {return false}
    if osTypeVersion != other.osTypeVersion {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_WorkerFilter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkerFilter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "first_property"),
    3: .standard(proto: "first_comparison"),
    4: .standard(proto: "second_property"),
    5: .standard(proto: "second_comparison"),
    6: .same(proto: "operation"),
    7: .same(proto: "connection"),
    8: .standard(proto: "first_operator"),
    9: .standard(proto: "second_operator"),
  ]

  private class _StorageClass {
    var _id: String = ""
    var _firstProperty: Org_Roylance_Yadel_WorkerProperty? = nil
    var _firstComparison: Org_Roylance_Yadel_WorkerFilter? = nil
    var _secondProperty: Org_Roylance_Yadel_WorkerProperty? = nil
    var _secondComparison: Org_Roylance_Yadel_WorkerFilter? = nil
    var _operation: Org_Roylance_Yadel_WorkerOperationsComparison = Org_Roylance_Yadel_WorkerOperationsComparison.equalsOperation
    var _connection: Org_Roylance_Yadel_WorkerConnection = Org_Roylance_Yadel_WorkerConnection.none
    var _firstOperator: Org_Roylance_Yadel_WorkerOperationsComparison = Org_Roylance_Yadel_WorkerOperationsComparison.equalsOperation
    var _secondOperator: Org_Roylance_Yadel_WorkerOperationsComparison = Org_Roylance_Yadel_WorkerOperationsComparison.equalsOperation

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _firstProperty = source._firstProperty
      _firstComparison = source._firstComparison
      _secondProperty = source._secondProperty
      _secondComparison = source._secondComparison
      _operation = source._operation
      _connection = source._connection
      _firstOperator = source._firstOperator
      _secondOperator = source._secondOperator
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var firstProperty: Org_Roylance_Yadel_WorkerProperty {
    get {return _storage._firstProperty ?? Org_Roylance_Yadel_WorkerProperty()}
    set {_uniqueStorage()._firstProperty = newValue}
  }
  public var hasFirstProperty: Bool {
    return _storage._firstProperty != nil
  }
  public mutating func clearFirstProperty() {
    return _storage._firstProperty = nil
  }

  public var firstComparison: Org_Roylance_Yadel_WorkerFilter {
    get {return _storage._firstComparison ?? Org_Roylance_Yadel_WorkerFilter()}
    set {_uniqueStorage()._firstComparison = newValue}
  }
  public var hasFirstComparison: Bool {
    return _storage._firstComparison != nil
  }
  public mutating func clearFirstComparison() {
    return _storage._firstComparison = nil
  }

  public var secondProperty: Org_Roylance_Yadel_WorkerProperty {
    get {return _storage._secondProperty ?? Org_Roylance_Yadel_WorkerProperty()}
    set {_uniqueStorage()._secondProperty = newValue}
  }
  public var hasSecondProperty: Bool {
    return _storage._secondProperty != nil
  }
  public mutating func clearSecondProperty() {
    return _storage._secondProperty = nil
  }

  public var secondComparison: Org_Roylance_Yadel_WorkerFilter {
    get {return _storage._secondComparison ?? Org_Roylance_Yadel_WorkerFilter()}
    set {_uniqueStorage()._secondComparison = newValue}
  }
  public var hasSecondComparison: Bool {
    return _storage._secondComparison != nil
  }
  public mutating func clearSecondComparison() {
    return _storage._secondComparison = nil
  }

  public var operation: Org_Roylance_Yadel_WorkerOperationsComparison {
    get {return _storage._operation}
    set {_uniqueStorage()._operation = newValue}
  }

  public var connection: Org_Roylance_Yadel_WorkerConnection {
    get {return _storage._connection}
    set {_uniqueStorage()._connection = newValue}
  }

  public var firstOperator: Org_Roylance_Yadel_WorkerOperationsComparison {
    get {return _storage._firstOperator}
    set {_uniqueStorage()._firstOperator = newValue}
  }

  public var secondOperator: Org_Roylance_Yadel_WorkerOperationsComparison {
    get {return _storage._secondOperator}
    set {_uniqueStorage()._secondOperator = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._firstProperty)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._firstComparison)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._secondProperty)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._secondComparison)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._operation)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._connection)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._firstOperator)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._secondOperator)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._firstProperty {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._firstComparison {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._secondProperty {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._secondComparison {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._operation != Org_Roylance_Yadel_WorkerOperationsComparison.equalsOperation {
        try visitor.visitSingularEnumField(value: _storage._operation, fieldNumber: 6)
      }
      if _storage._connection != Org_Roylance_Yadel_WorkerConnection.none {
        try visitor.visitSingularEnumField(value: _storage._connection, fieldNumber: 7)
      }
      if _storage._firstOperator != Org_Roylance_Yadel_WorkerOperationsComparison.equalsOperation {
        try visitor.visitSingularEnumField(value: _storage._firstOperator, fieldNumber: 8)
      }
      if _storage._secondOperator != Org_Roylance_Yadel_WorkerOperationsComparison.equalsOperation {
        try visitor.visitSingularEnumField(value: _storage._secondOperator, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yadel_WorkerFilter) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._firstProperty != other_storage._firstProperty {return false}
        if _storage._firstComparison != other_storage._firstComparison {return false}
        if _storage._secondProperty != other_storage._secondProperty {return false}
        if _storage._secondComparison != other_storage._secondComparison {return false}
        if _storage._operation != other_storage._operation {return false}
        if _storage._connection != other_storage._connection {return false}
        if _storage._firstOperator != other_storage._firstOperator {return false}
        if _storage._secondOperator != other_storage._secondOperator {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_WorkerConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkerConfiguration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "ip"),
    3: .same(proto: "port"),
    4: .same(proto: "host"),
    5: .standard(proto: "initialized_time"),
    6: .same(proto: "state"),
    7: .same(proto: "task"),
    8: .same(proto: "dag"),
    9: .standard(proto: "minutes_before_task_reset"),
    10: .standard(proto: "task_start_time"),
    11: .standard(proto: "os_bit_version"),
    12: .standard(proto: "os_type_version"),
    13: .standard(proto: "os_major_version"),
    14: .standard(proto: "os_minor_version"),
    15: .standard(proto: "os_build_version"),
    16: .same(proto: "properties"),
  ]

  private class _StorageClass {
    var _id: String = ""
    var _ip: String = ""
    var _port: String = ""
    var _host: String = ""
    var _initializedTime: String = ""
    var _state: Org_Roylance_Yadel_WorkerState = Org_Roylance_Yadel_WorkerState.working
    var _task: Org_Roylance_Yadel_Task? = nil
    var _dag: Org_Roylance_Yadel_Dag? = nil
    var _minutesBeforeTaskReset: UInt64 = 0
    var _taskStartTime: String = ""
    var _osBitVersion: Org_Roylance_Yadel_OSBitVersion = Org_Roylance_Yadel_OSBitVersion.v64BitVersion
    var _osTypeVersion: Org_Roylance_Yadel_OSTypeVersion = Org_Roylance_Yadel_OSTypeVersion.macOsTypeVersion
    var _osMajorVersion: String = ""
    var _osMinorVersion: String = ""
    var _osBuildVersion: String = ""
    var _properties: [Org_Roylance_Yadel_WorkerProperty] = []

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _ip = source._ip
      _port = source._port
      _host = source._host
      _initializedTime = source._initializedTime
      _state = source._state
      _task = source._task
      _dag = source._dag
      _minutesBeforeTaskReset = source._minutesBeforeTaskReset
      _taskStartTime = source._taskStartTime
      _osBitVersion = source._osBitVersion
      _osTypeVersion = source._osTypeVersion
      _osMajorVersion = source._osMajorVersion
      _osMinorVersion = source._osMinorVersion
      _osBuildVersion = source._osBuildVersion
      _properties = source._properties
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var ip: String {
    get {return _storage._ip}
    set {_uniqueStorage()._ip = newValue}
  }

  public var port: String {
    get {return _storage._port}
    set {_uniqueStorage()._port = newValue}
  }

  public var host: String {
    get {return _storage._host}
    set {_uniqueStorage()._host = newValue}
  }

  public var initializedTime: String {
    get {return _storage._initializedTime}
    set {_uniqueStorage()._initializedTime = newValue}
  }

  public var state: Org_Roylance_Yadel_WorkerState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  public var task: Org_Roylance_Yadel_Task {
    get {return _storage._task ?? Org_Roylance_Yadel_Task()}
    set {_uniqueStorage()._task = newValue}
  }
  public var hasTask: Bool {
    return _storage._task != nil
  }
  public mutating func clearTask() {
    return _storage._task = nil
  }

  public var dag: Org_Roylance_Yadel_Dag {
    get {return _storage._dag ?? Org_Roylance_Yadel_Dag()}
    set {_uniqueStorage()._dag = newValue}
  }
  public var hasDag: Bool {
    return _storage._dag != nil
  }
  public mutating func clearDag() {
    return _storage._dag = nil
  }

  public var minutesBeforeTaskReset: UInt64 {
    get {return _storage._minutesBeforeTaskReset}
    set {_uniqueStorage()._minutesBeforeTaskReset = newValue}
  }

  public var taskStartTime: String {
    get {return _storage._taskStartTime}
    set {_uniqueStorage()._taskStartTime = newValue}
  }

  public var osBitVersion: Org_Roylance_Yadel_OSBitVersion {
    get {return _storage._osBitVersion}
    set {_uniqueStorage()._osBitVersion = newValue}
  }

  public var osTypeVersion: Org_Roylance_Yadel_OSTypeVersion {
    get {return _storage._osTypeVersion}
    set {_uniqueStorage()._osTypeVersion = newValue}
  }

  public var osMajorVersion: String {
    get {return _storage._osMajorVersion}
    set {_uniqueStorage()._osMajorVersion = newValue}
  }

  public var osMinorVersion: String {
    get {return _storage._osMinorVersion}
    set {_uniqueStorage()._osMinorVersion = newValue}
  }

  public var osBuildVersion: String {
    get {return _storage._osBuildVersion}
    set {_uniqueStorage()._osBuildVersion = newValue}
  }

  public var properties: [Org_Roylance_Yadel_WorkerProperty] {
    get {return _storage._properties}
    set {_uniqueStorage()._properties = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._ip)
        case 3: try decoder.decodeSingularStringField(value: &_storage._port)
        case 4: try decoder.decodeSingularStringField(value: &_storage._host)
        case 5: try decoder.decodeSingularStringField(value: &_storage._initializedTime)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._state)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._task)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._dag)
        case 9: try decoder.decodeSingularUInt64Field(value: &_storage._minutesBeforeTaskReset)
        case 10: try decoder.decodeSingularStringField(value: &_storage._taskStartTime)
        case 11: try decoder.decodeSingularEnumField(value: &_storage._osBitVersion)
        case 12: try decoder.decodeSingularEnumField(value: &_storage._osTypeVersion)
        case 13: try decoder.decodeSingularStringField(value: &_storage._osMajorVersion)
        case 14: try decoder.decodeSingularStringField(value: &_storage._osMinorVersion)
        case 15: try decoder.decodeSingularStringField(value: &_storage._osBuildVersion)
        case 16: try decoder.decodeRepeatedMessageField(value: &_storage._properties)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._ip.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ip, fieldNumber: 2)
      }
      if !_storage._port.isEmpty {
        try visitor.visitSingularStringField(value: _storage._port, fieldNumber: 3)
      }
      if !_storage._host.isEmpty {
        try visitor.visitSingularStringField(value: _storage._host, fieldNumber: 4)
      }
      if !_storage._initializedTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._initializedTime, fieldNumber: 5)
      }
      if _storage._state != Org_Roylance_Yadel_WorkerState.working {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 6)
      }
      if let v = _storage._task {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._dag {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if _storage._minutesBeforeTaskReset != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._minutesBeforeTaskReset, fieldNumber: 9)
      }
      if !_storage._taskStartTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._taskStartTime, fieldNumber: 10)
      }
      if _storage._osBitVersion != Org_Roylance_Yadel_OSBitVersion.v64BitVersion {
        try visitor.visitSingularEnumField(value: _storage._osBitVersion, fieldNumber: 11)
      }
      if _storage._osTypeVersion != Org_Roylance_Yadel_OSTypeVersion.macOsTypeVersion {
        try visitor.visitSingularEnumField(value: _storage._osTypeVersion, fieldNumber: 12)
      }
      if !_storage._osMajorVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._osMajorVersion, fieldNumber: 13)
      }
      if !_storage._osMinorVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._osMinorVersion, fieldNumber: 14)
      }
      if !_storage._osBuildVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._osBuildVersion, fieldNumber: 15)
      }
      if !_storage._properties.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._properties, fieldNumber: 16)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yadel_WorkerConfiguration) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._ip != other_storage._ip {return false}
        if _storage._port != other_storage._port {return false}
        if _storage._host != other_storage._host {return false}
        if _storage._initializedTime != other_storage._initializedTime {return false}
        if _storage._state != other_storage._state {return false}
        if _storage._task != other_storage._task {return false}
        if _storage._dag != other_storage._dag {return false}
        if _storage._minutesBeforeTaskReset != other_storage._minutesBeforeTaskReset {return false}
        if _storage._taskStartTime != other_storage._taskStartTime {return false}
        if _storage._osBitVersion != other_storage._osBitVersion {return false}
        if _storage._osTypeVersion != other_storage._osTypeVersion {return false}
        if _storage._osMajorVersion != other_storage._osMajorVersion {return false}
        if _storage._osMinorVersion != other_storage._osMinorVersion {return false}
        if _storage._osBuildVersion != other_storage._osBuildVersion {return false}
        if _storage._properties != other_storage._properties {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_Log: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Log"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "message"),
  ]

  public var id: String = ""

  public var message: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularStringField(value: &message)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if !message.isEmpty {
      try visitor.visitSingularStringField(value: message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yadel_Log) -> Bool {
    if id != other.id {return false}
    if message != other.message {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_Dag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Dag"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "display"),
    3: .standard(proto: "flattened_tasks"),
    4: .standard(proto: "execution_date"),
    5: .standard(proto: "start_date"),
    6: .standard(proto: "end_date"),
    7: .same(proto: "duration"),
    8: .standard(proto: "uncompleted_tasks"),
    9: .standard(proto: "processing_tasks"),
    10: .standard(proto: "errored_tasks"),
    11: .standard(proto: "completed_tasks"),
    12: .same(proto: "parent"),
  ]

  private class _StorageClass {
    var _id: String = ""
    var _display: String = ""
    var _flattenedTasks: [Org_Roylance_Yadel_Task] = []
    var _executionDate: Int64 = 0
    var _startDate: Int64 = 0
    var _endDate: Int64 = 0
    var _duration: Int64 = 0
    var _uncompletedTasks: [Org_Roylance_Yadel_Task] = []
    var _processingTasks: [Org_Roylance_Yadel_Task] = []
    var _erroredTasks: [Org_Roylance_Yadel_Task] = []
    var _completedTasks: [Org_Roylance_Yadel_Task] = []
    var _parent: Org_Roylance_Yadel_Dag? = nil

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _display = source._display
      _flattenedTasks = source._flattenedTasks
      _executionDate = source._executionDate
      _startDate = source._startDate
      _endDate = source._endDate
      _duration = source._duration
      _uncompletedTasks = source._uncompletedTasks
      _processingTasks = source._processingTasks
      _erroredTasks = source._erroredTasks
      _completedTasks = source._completedTasks
      _parent = source._parent
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var display: String {
    get {return _storage._display}
    set {_uniqueStorage()._display = newValue}
  }

  public var flattenedTasks: [Org_Roylance_Yadel_Task] {
    get {return _storage._flattenedTasks}
    set {_uniqueStorage()._flattenedTasks = newValue}
  }

  public var executionDate: Int64 {
    get {return _storage._executionDate}
    set {_uniqueStorage()._executionDate = newValue}
  }

  public var startDate: Int64 {
    get {return _storage._startDate}
    set {_uniqueStorage()._startDate = newValue}
  }

  public var endDate: Int64 {
    get {return _storage._endDate}
    set {_uniqueStorage()._endDate = newValue}
  }

  public var duration: Int64 {
    get {return _storage._duration}
    set {_uniqueStorage()._duration = newValue}
  }

  public var uncompletedTasks: [Org_Roylance_Yadel_Task] {
    get {return _storage._uncompletedTasks}
    set {_uniqueStorage()._uncompletedTasks = newValue}
  }

  public var processingTasks: [Org_Roylance_Yadel_Task] {
    get {return _storage._processingTasks}
    set {_uniqueStorage()._processingTasks = newValue}
  }

  public var erroredTasks: [Org_Roylance_Yadel_Task] {
    get {return _storage._erroredTasks}
    set {_uniqueStorage()._erroredTasks = newValue}
  }

  public var completedTasks: [Org_Roylance_Yadel_Task] {
    get {return _storage._completedTasks}
    set {_uniqueStorage()._completedTasks = newValue}
  }

  public var parent: Org_Roylance_Yadel_Dag {
    get {return _storage._parent ?? Org_Roylance_Yadel_Dag()}
    set {_uniqueStorage()._parent = newValue}
  }
  public var hasParent: Bool {
    return _storage._parent != nil
  }
  public mutating func clearParent() {
    return _storage._parent = nil
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._display)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._flattenedTasks)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._executionDate)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._startDate)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._endDate)
        case 7: try decoder.decodeSingularInt64Field(value: &_storage._duration)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._uncompletedTasks)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._processingTasks)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._erroredTasks)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._completedTasks)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._parent)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._display.isEmpty {
        try visitor.visitSingularStringField(value: _storage._display, fieldNumber: 2)
      }
      if !_storage._flattenedTasks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._flattenedTasks, fieldNumber: 3)
      }
      if _storage._executionDate != 0 {
        try visitor.visitSingularInt64Field(value: _storage._executionDate, fieldNumber: 4)
      }
      if _storage._startDate != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startDate, fieldNumber: 5)
      }
      if _storage._endDate != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endDate, fieldNumber: 6)
      }
      if _storage._duration != 0 {
        try visitor.visitSingularInt64Field(value: _storage._duration, fieldNumber: 7)
      }
      if !_storage._uncompletedTasks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._uncompletedTasks, fieldNumber: 8)
      }
      if !_storage._processingTasks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._processingTasks, fieldNumber: 9)
      }
      if !_storage._erroredTasks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._erroredTasks, fieldNumber: 10)
      }
      if !_storage._completedTasks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._completedTasks, fieldNumber: 11)
      }
      if let v = _storage._parent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yadel_Dag) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._display != other_storage._display {return false}
        if _storage._flattenedTasks != other_storage._flattenedTasks {return false}
        if _storage._executionDate != other_storage._executionDate {return false}
        if _storage._startDate != other_storage._startDate {return false}
        if _storage._endDate != other_storage._endDate {return false}
        if _storage._duration != other_storage._duration {return false}
        if _storage._uncompletedTasks != other_storage._uncompletedTasks {return false}
        if _storage._processingTasks != other_storage._processingTasks {return false}
        if _storage._erroredTasks != other_storage._erroredTasks {return false}
        if _storage._completedTasks != other_storage._completedTasks {return false}
        if _storage._parent != other_storage._parent {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_Task: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Task"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "display"),
    3: .same(proto: "dependencies"),
    4: .standard(proto: "dag_id"),
    5: .same(proto: "logs"),
    6: .standard(proto: "execution_date"),
    7: .standard(proto: "start_date"),
    8: .standard(proto: "end_date"),
    9: .same(proto: "duration"),
    10: .standard(proto: "first_context_base_64"),
    11: .standard(proto: "second_context_base_64"),
    12: .standard(proto: "third_context_base_64"),
    13: .standard(proto: "is_waiting_for_another_dag_task"),
    14: .same(proto: "filters"),
  ]

  public var id: String = ""

  public var display: String = ""

  public var dependencies: [Org_Roylance_Yadel_TaskDependency] = []

  public var dagId: String = ""

  public var logs: [Org_Roylance_Yadel_Log] = []

  public var executionDate: Int64 = 0

  public var startDate: Int64 = 0

  public var endDate: Int64 = 0

  public var duration: Int64 = 0

  public var firstContextBase64: String = ""

  public var secondContextBase64: String = ""

  public var thirdContextBase64: String = ""

  public var isWaitingForAnotherDagTask: Bool = false

  public var filters: [Org_Roylance_Yadel_WorkerFilter] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularStringField(value: &display)
      case 3: try decoder.decodeRepeatedMessageField(value: &dependencies)
      case 4: try decoder.decodeSingularStringField(value: &dagId)
      case 5: try decoder.decodeRepeatedMessageField(value: &logs)
      case 6: try decoder.decodeSingularInt64Field(value: &executionDate)
      case 7: try decoder.decodeSingularInt64Field(value: &startDate)
      case 8: try decoder.decodeSingularInt64Field(value: &endDate)
      case 9: try decoder.decodeSingularInt64Field(value: &duration)
      case 10: try decoder.decodeSingularStringField(value: &firstContextBase64)
      case 11: try decoder.decodeSingularStringField(value: &secondContextBase64)
      case 12: try decoder.decodeSingularStringField(value: &thirdContextBase64)
      case 13: try decoder.decodeSingularBoolField(value: &isWaitingForAnotherDagTask)
      case 14: try decoder.decodeRepeatedMessageField(value: &filters)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if !display.isEmpty {
      try visitor.visitSingularStringField(value: display, fieldNumber: 2)
    }
    if !dependencies.isEmpty {
      try visitor.visitRepeatedMessageField(value: dependencies, fieldNumber: 3)
    }
    if !dagId.isEmpty {
      try visitor.visitSingularStringField(value: dagId, fieldNumber: 4)
    }
    if !logs.isEmpty {
      try visitor.visitRepeatedMessageField(value: logs, fieldNumber: 5)
    }
    if executionDate != 0 {
      try visitor.visitSingularInt64Field(value: executionDate, fieldNumber: 6)
    }
    if startDate != 0 {
      try visitor.visitSingularInt64Field(value: startDate, fieldNumber: 7)
    }
    if endDate != 0 {
      try visitor.visitSingularInt64Field(value: endDate, fieldNumber: 8)
    }
    if duration != 0 {
      try visitor.visitSingularInt64Field(value: duration, fieldNumber: 9)
    }
    if !firstContextBase64.isEmpty {
      try visitor.visitSingularStringField(value: firstContextBase64, fieldNumber: 10)
    }
    if !secondContextBase64.isEmpty {
      try visitor.visitSingularStringField(value: secondContextBase64, fieldNumber: 11)
    }
    if !thirdContextBase64.isEmpty {
      try visitor.visitSingularStringField(value: thirdContextBase64, fieldNumber: 12)
    }
    if isWaitingForAnotherDagTask != false {
      try visitor.visitSingularBoolField(value: isWaitingForAnotherDagTask, fieldNumber: 13)
    }
    if !filters.isEmpty {
      try visitor.visitRepeatedMessageField(value: filters, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yadel_Task) -> Bool {
    if id != other.id {return false}
    if display != other.display {return false}
    if dependencies != other.dependencies {return false}
    if dagId != other.dagId {return false}
    if logs != other.logs {return false}
    if executionDate != other.executionDate {return false}
    if startDate != other.startDate {return false}
    if endDate != other.endDate {return false}
    if duration != other.duration {return false}
    if firstContextBase64 != other.firstContextBase64 {return false}
    if secondContextBase64 != other.secondContextBase64 {return false}
    if thirdContextBase64 != other.thirdContextBase64 {return false}
    if isWaitingForAnotherDagTask != other.isWaitingForAnotherDagTask {return false}
    if filters != other.filters {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_TaskDependency: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TaskDependency"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "parent_task_id"),
  ]

  public var id: String = ""

  public var parentTaskId: String = ""

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularStringField(value: &parentTaskId)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if !parentTaskId.isEmpty {
      try visitor.visitSingularStringField(value: parentTaskId, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yadel_TaskDependency) -> Bool {
    if id != other.id {return false}
    if parentTaskId != other.parentTaskId {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_AddTaskToDag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddTaskToDag"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "parent_task"),
    3: .standard(proto: "new_task"),
    4: .standard(proto: "first_context_base_64"),
    5: .standard(proto: "second_context_base_64"),
    6: .standard(proto: "third_context_base_64"),
  ]

  private class _StorageClass {
    var _id: String = ""
    var _parentTask: Org_Roylance_Yadel_Task? = nil
    var _newTask: Org_Roylance_Yadel_Task? = nil
    var _firstContextBase64: String = ""
    var _secondContextBase64: String = ""
    var _thirdContextBase64: String = ""

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _parentTask = source._parentTask
      _newTask = source._newTask
      _firstContextBase64 = source._firstContextBase64
      _secondContextBase64 = source._secondContextBase64
      _thirdContextBase64 = source._thirdContextBase64
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var parentTask: Org_Roylance_Yadel_Task {
    get {return _storage._parentTask ?? Org_Roylance_Yadel_Task()}
    set {_uniqueStorage()._parentTask = newValue}
  }
  public var hasParentTask: Bool {
    return _storage._parentTask != nil
  }
  public mutating func clearParentTask() {
    return _storage._parentTask = nil
  }

  public var newTask: Org_Roylance_Yadel_Task {
    get {return _storage._newTask ?? Org_Roylance_Yadel_Task()}
    set {_uniqueStorage()._newTask = newValue}
  }
  public var hasNewTask: Bool {
    return _storage._newTask != nil
  }
  public mutating func clearNewTask() {
    return _storage._newTask = nil
  }

  public var firstContextBase64: String {
    get {return _storage._firstContextBase64}
    set {_uniqueStorage()._firstContextBase64 = newValue}
  }

  public var secondContextBase64: String {
    get {return _storage._secondContextBase64}
    set {_uniqueStorage()._secondContextBase64 = newValue}
  }

  public var thirdContextBase64: String {
    get {return _storage._thirdContextBase64}
    set {_uniqueStorage()._thirdContextBase64 = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._parentTask)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._newTask)
        case 4: try decoder.decodeSingularStringField(value: &_storage._firstContextBase64)
        case 5: try decoder.decodeSingularStringField(value: &_storage._secondContextBase64)
        case 6: try decoder.decodeSingularStringField(value: &_storage._thirdContextBase64)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._parentTask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._newTask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._firstContextBase64.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firstContextBase64, fieldNumber: 4)
      }
      if !_storage._secondContextBase64.isEmpty {
        try visitor.visitSingularStringField(value: _storage._secondContextBase64, fieldNumber: 5)
      }
      if !_storage._thirdContextBase64.isEmpty {
        try visitor.visitSingularStringField(value: _storage._thirdContextBase64, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yadel_AddTaskToDag) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._parentTask != other_storage._parentTask {return false}
        if _storage._newTask != other_storage._newTask {return false}
        if _storage._firstContextBase64 != other_storage._firstContextBase64 {return false}
        if _storage._secondContextBase64 != other_storage._secondContextBase64 {return false}
        if _storage._thirdContextBase64 != other_storage._thirdContextBase64 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_CompleteTask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompleteTask"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "task"),
    3: .standard(proto: "worker_configuration"),
    5: .standard(proto: "is_error"),
  ]

  private class _StorageClass {
    var _id: String = ""
    var _task: Org_Roylance_Yadel_Task? = nil
    var _workerConfiguration: Org_Roylance_Yadel_WorkerConfiguration? = nil
    var _isError: Bool = false

    init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _task = source._task
      _workerConfiguration = source._workerConfiguration
      _isError = source._isError
    }
  }

  private var _storage = _StorageClass()

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var task: Org_Roylance_Yadel_Task {
    get {return _storage._task ?? Org_Roylance_Yadel_Task()}
    set {_uniqueStorage()._task = newValue}
  }
  public var hasTask: Bool {
    return _storage._task != nil
  }
  public mutating func clearTask() {
    return _storage._task = nil
  }

  public var workerConfiguration: Org_Roylance_Yadel_WorkerConfiguration {
    get {return _storage._workerConfiguration ?? Org_Roylance_Yadel_WorkerConfiguration()}
    set {_uniqueStorage()._workerConfiguration = newValue}
  }
  public var hasWorkerConfiguration: Bool {
    return _storage._workerConfiguration != nil
  }
  public mutating func clearWorkerConfiguration() {
    return _storage._workerConfiguration = nil
  }

  public var isError: Bool {
    get {return _storage._isError}
    set {_uniqueStorage()._isError = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._task)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._workerConfiguration)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._isError)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._task {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._workerConfiguration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._isError != false {
        try visitor.visitSingularBoolField(value: _storage._isError, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yadel_CompleteTask) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._id != other_storage._id {return false}
        if _storage._task != other_storage._task {return false}
        if _storage._workerConfiguration != other_storage._workerConfiguration {return false}
        if _storage._isError != other_storage._isError {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_AllDags: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AllDags"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dags"),
    2: .same(proto: "workers"),
    3: .standard(proto: "include_unprocessed"),
    4: .standard(proto: "include_file_saved"),
  ]

  public var dags: [Org_Roylance_Yadel_Dag] = []

  public var workers: [Org_Roylance_Yadel_WorkerConfiguration] = []

  public var includeUnprocessed: Bool = false

  public var includeFileSaved: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &dags)
      case 2: try decoder.decodeRepeatedMessageField(value: &workers)
      case 3: try decoder.decodeSingularBoolField(value: &includeUnprocessed)
      case 4: try decoder.decodeSingularBoolField(value: &includeFileSaved)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !dags.isEmpty {
      try visitor.visitRepeatedMessageField(value: dags, fieldNumber: 1)
    }
    if !workers.isEmpty {
      try visitor.visitRepeatedMessageField(value: workers, fieldNumber: 2)
    }
    if includeUnprocessed != false {
      try visitor.visitSingularBoolField(value: includeUnprocessed, fieldNumber: 3)
    }
    if includeFileSaved != false {
      try visitor.visitSingularBoolField(value: includeFileSaved, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yadel_AllDags) -> Bool {
    if dags != other.dags {return false}
    if workers != other.workers {return false}
    if includeUnprocessed != other.includeUnprocessed {return false}
    if includeFileSaved != other.includeFileSaved {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_WorkerProperties: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkerProperties"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "os_bit_version"),
    3: .standard(proto: "os_type_version"),
    4: .standard(proto: "os_major_version"),
    5: .standard(proto: "os_minor_version"),
    6: .standard(proto: "os_build_version"),
    7: .same(proto: "properties"),
  ]

  public var id: String = ""

  public var osBitVersion: Org_Roylance_Yadel_OSBitVersion = Org_Roylance_Yadel_OSBitVersion.v64BitVersion

  public var osTypeVersion: Org_Roylance_Yadel_OSTypeVersion = Org_Roylance_Yadel_OSTypeVersion.macOsTypeVersion

  public var osMajorVersion: String = ""

  public var osMinorVersion: String = ""

  public var osBuildVersion: String = ""

  public var properties: [Org_Roylance_Yadel_WorkerProperty] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &id)
      case 2: try decoder.decodeSingularEnumField(value: &osBitVersion)
      case 3: try decoder.decodeSingularEnumField(value: &osTypeVersion)
      case 4: try decoder.decodeSingularStringField(value: &osMajorVersion)
      case 5: try decoder.decodeSingularStringField(value: &osMinorVersion)
      case 6: try decoder.decodeSingularStringField(value: &osBuildVersion)
      case 7: try decoder.decodeRepeatedMessageField(value: &properties)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !id.isEmpty {
      try visitor.visitSingularStringField(value: id, fieldNumber: 1)
    }
    if osBitVersion != Org_Roylance_Yadel_OSBitVersion.v64BitVersion {
      try visitor.visitSingularEnumField(value: osBitVersion, fieldNumber: 2)
    }
    if osTypeVersion != Org_Roylance_Yadel_OSTypeVersion.macOsTypeVersion {
      try visitor.visitSingularEnumField(value: osTypeVersion, fieldNumber: 3)
    }
    if !osMajorVersion.isEmpty {
      try visitor.visitSingularStringField(value: osMajorVersion, fieldNumber: 4)
    }
    if !osMinorVersion.isEmpty {
      try visitor.visitSingularStringField(value: osMinorVersion, fieldNumber: 5)
    }
    if !osBuildVersion.isEmpty {
      try visitor.visitSingularStringField(value: osBuildVersion, fieldNumber: 6)
    }
    if !properties.isEmpty {
      try visitor.visitRepeatedMessageField(value: properties, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Org_Roylance_Yadel_WorkerProperties) -> Bool {
    if id != other.id {return false}
    if osBitVersion != other.osBitVersion {return false}
    if osTypeVersion != other.osTypeVersion {return false}
    if osMajorVersion != other.osMajorVersion {return false}
    if osMinorVersion != other.osMinorVersion {return false}
    if osBuildVersion != other.osBuildVersion {return false}
    if properties != other.properties {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
