/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: yadel_model.proto
 *
 */

import Foundation
import SwiftProtobuf


public enum Org_Roylance_Yadel_WorkerState: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case working // = 0
  case idle // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .working
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .working
    case 1: self = .idle
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "working": self = .working
    case "idle": self = .idle
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "WORKING": self = .working
    case "IDLE": self = .idle
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "WORKING": self = .working
    case "IDLE": self = .idle
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .working: return 0
      case .idle: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .working: return "\"WORKING\""
      case .idle: return "\"IDLE\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .working: return ".working"
      case .idle: return ".idle"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public enum Org_Roylance_Yadel_WorkerToManagerMessageType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case registration // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .registration
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .registration
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "registration": self = .registration
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "REGISTRATION": self = .registration
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "REGISTRATION": self = .registration
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .registration: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .registration: return "\"REGISTRATION\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .registration: return ".registration"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public enum Org_Roylance_Yadel_ManagerToManagerMessageType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case ensureWorkersWorking // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .ensureWorkersWorking
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ensureWorkersWorking
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "ensureWorkersWorking": self = .ensureWorkersWorking
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "ENSURE_WORKERS_WORKING": self = .ensureWorkersWorking
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "ENSURE_WORKERS_WORKING": self = .ensureWorkersWorking
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .ensureWorkersWorking: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .ensureWorkersWorking: return "\"ENSURE_WORKERS_WORKING\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .ensureWorkersWorking: return ".ensureWorkersWorking"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public enum Org_Roylance_Yadel_ActorRole: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case manager // = 0
  case worker // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .manager
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .manager
    case 1: self = .worker
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "manager": self = .manager
    case "worker": self = .worker
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "MANAGER": self = .manager
    case "WORKER": self = .worker
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "MANAGER": self = .manager
    case "WORKER": self = .worker
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .manager: return 0
      case .worker: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .manager: return "\"MANAGER\""
      case .worker: return "\"WORKER\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .manager: return ".manager"
      case .worker: return ".worker"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public struct Org_Roylance_Yadel_WorkerConfiguration: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_WorkerConfiguration"}
  public var protoMessageName: String {return "WorkerConfiguration"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "ip", swift: "ip"),
    3: .same(proto: "port", swift: "port"),
    4: .same(proto: "host", swift: "host"),
    5: .unique(proto: "initialized_time", json: "initializedTime", swift: "initializedTime"),
    6: .same(proto: "state", swift: "state"),
    7: .same(proto: "task", swift: "task"),
    8: .same(proto: "dag", swift: "dag"),
    9: .unique(proto: "minutes_before_task_reset", json: "minutesBeforeTaskReset", swift: "minutesBeforeTaskReset"),
    10: .unique(proto: "task_start_time", json: "taskStartTime", swift: "taskStartTime"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yadel_WorkerConfiguration
    var _id: String = ""
    var _ip: String = ""
    var _port: String = ""
    var _host: String = ""
    var _initializedTime: String = ""
    var _state: Org_Roylance_Yadel_WorkerState = Org_Roylance_Yadel_WorkerState.working
    var _task: Org_Roylance_Yadel_Task? = nil
    var _dag: Org_Roylance_Yadel_Dag? = nil
    var _minutesBeforeTaskReset: UInt64 = 0
    var _taskStartTime: String = ""

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_id)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_ip)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_port)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_host)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_initializedTime)
      case 6: try setter.decodeSingularField(fieldType: Org_Roylance_Yadel_WorkerState.self, value: &_state)
      case 7: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yadel_Task.self, value: &_task)
      case 8: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yadel_Dag.self, value: &_dag)
      case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &_minutesBeforeTaskReset)
      case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_taskStartTime)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _id != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _id, fieldNumber: 1)
      }
      if _ip != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _ip, fieldNumber: 2)
      }
      if _port != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _port, fieldNumber: 3)
      }
      if _host != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _host, fieldNumber: 4)
      }
      if _initializedTime != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _initializedTime, fieldNumber: 5)
      }
      if _state != Org_Roylance_Yadel_WorkerState.working {
        try visitor.visitSingularField(fieldType: Org_Roylance_Yadel_WorkerState.self, value: _state, fieldNumber: 6)
      }
      if let v = _task {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _dag {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if _minutesBeforeTaskReset != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: _minutesBeforeTaskReset, fieldNumber: 9)
      }
      if _taskStartTime != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _taskStartTime, fieldNumber: 10)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _id != other._id {return false}
      if _ip != other._ip {return false}
      if _port != other._port {return false}
      if _host != other._host {return false}
      if _initializedTime != other._initializedTime {return false}
      if _state != other._state {return false}
      if _task != other._task {return false}
      if _dag != other._dag {return false}
      if _minutesBeforeTaskReset != other._minutesBeforeTaskReset {return false}
      if _taskStartTime != other._taskStartTime {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._id = _id
      clone._ip = _ip
      clone._port = _port
      clone._host = _host
      clone._initializedTime = _initializedTime
      clone._state = _state
      clone._task = _task
      clone._dag = _dag
      clone._minutesBeforeTaskReset = _minutesBeforeTaskReset
      clone._taskStartTime = _taskStartTime
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var ip: String {
    get {return _storage._ip}
    set {_uniqueStorage()._ip = newValue}
  }

  public var port: String {
    get {return _storage._port}
    set {_uniqueStorage()._port = newValue}
  }

  public var host: String {
    get {return _storage._host}
    set {_uniqueStorage()._host = newValue}
  }

  public var initializedTime: String {
    get {return _storage._initializedTime}
    set {_uniqueStorage()._initializedTime = newValue}
  }

  public var state: Org_Roylance_Yadel_WorkerState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  public var task: Org_Roylance_Yadel_Task {
    get {return _storage._task ?? Org_Roylance_Yadel_Task()}
    set {_uniqueStorage()._task = newValue}
  }
  public var hasTask: Bool {
    return _storage._task != nil
  }
  public mutating func clearTask() {
    return _storage._task = nil
  }

  public var dag: Org_Roylance_Yadel_Dag {
    get {return _storage._dag ?? Org_Roylance_Yadel_Dag()}
    set {_uniqueStorage()._dag = newValue}
  }
  public var hasDag: Bool {
    return _storage._dag != nil
  }
  public mutating func clearDag() {
    return _storage._dag = nil
  }

  public var minutesBeforeTaskReset: UInt64 {
    get {return _storage._minutesBeforeTaskReset}
    set {_uniqueStorage()._minutesBeforeTaskReset = newValue}
  }

  public var taskStartTime: String {
    get {return _storage._taskStartTime}
    set {_uniqueStorage()._taskStartTime = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_WorkerConfiguration) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yadel_Log: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_Log"}
  public var protoMessageName: String {return "Log"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "message", swift: "message"),
  ]


  public var id: String = ""

  public var message: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &message)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
    if message != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: message, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_Log) -> Bool {
    if id != other.id {return false}
    if message != other.message {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_Dag: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_Dag"}
  public var protoMessageName: String {return "Dag"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "display", swift: "display"),
    3: .unique(proto: "flattened_tasks", json: "flattenedTasks", swift: "flattenedTasks"),
    4: .unique(proto: "execution_date", json: "executionDate", swift: "executionDate"),
    5: .unique(proto: "start_date", json: "startDate", swift: "startDate"),
    6: .unique(proto: "end_date", json: "endDate", swift: "endDate"),
    7: .same(proto: "duration", swift: "duration"),
    8: .unique(proto: "uncompleted_tasks", json: "uncompletedTasks", swift: "uncompletedTasks"),
    9: .unique(proto: "processing_tasks", json: "processingTasks", swift: "processingTasks"),
    10: .unique(proto: "errored_tasks", json: "erroredTasks", swift: "erroredTasks"),
    11: .unique(proto: "completed_tasks", json: "completedTasks", swift: "completedTasks"),
    12: .same(proto: "parent", swift: "parent"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yadel_Dag
    var _id: String = ""
    var _display: String = ""
    var _flattenedTasks: [Org_Roylance_Yadel_Task] = []
    var _executionDate: Int64 = 0
    var _startDate: Int64 = 0
    var _endDate: Int64 = 0
    var _duration: Int64 = 0
    var _uncompletedTasks: [Org_Roylance_Yadel_Task] = []
    var _processingTasks: [Org_Roylance_Yadel_Task] = []
    var _erroredTasks: [Org_Roylance_Yadel_Task] = []
    var _completedTasks: [Org_Roylance_Yadel_Task] = []
    var _parent: Org_Roylance_Yadel_Dag? = nil

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_id)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_display)
      case 3: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_Task.self, value: &_flattenedTasks)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_executionDate)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_startDate)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_endDate)
      case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &_duration)
      case 8: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_Task.self, value: &_uncompletedTasks)
      case 9: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_Task.self, value: &_processingTasks)
      case 10: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_Task.self, value: &_erroredTasks)
      case 11: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_Task.self, value: &_completedTasks)
      case 12: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yadel_Dag.self, value: &_parent)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _id != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _id, fieldNumber: 1)
      }
      if _display != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _display, fieldNumber: 2)
      }
      if !_flattenedTasks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _flattenedTasks, fieldNumber: 3)
      }
      if _executionDate != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _executionDate, fieldNumber: 4)
      }
      if _startDate != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _startDate, fieldNumber: 5)
      }
      if _endDate != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _endDate, fieldNumber: 6)
      }
      if _duration != 0 {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: _duration, fieldNumber: 7)
      }
      if !_uncompletedTasks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _uncompletedTasks, fieldNumber: 8)
      }
      if !_processingTasks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _processingTasks, fieldNumber: 9)
      }
      if !_erroredTasks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _erroredTasks, fieldNumber: 10)
      }
      if !_completedTasks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _completedTasks, fieldNumber: 11)
      }
      if let v = _parent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _id != other._id {return false}
      if _display != other._display {return false}
      if _flattenedTasks != other._flattenedTasks {return false}
      if _executionDate != other._executionDate {return false}
      if _startDate != other._startDate {return false}
      if _endDate != other._endDate {return false}
      if _duration != other._duration {return false}
      if _uncompletedTasks != other._uncompletedTasks {return false}
      if _processingTasks != other._processingTasks {return false}
      if _erroredTasks != other._erroredTasks {return false}
      if _completedTasks != other._completedTasks {return false}
      if _parent != other._parent {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._id = _id
      clone._display = _display
      clone._flattenedTasks = _flattenedTasks
      clone._executionDate = _executionDate
      clone._startDate = _startDate
      clone._endDate = _endDate
      clone._duration = _duration
      clone._uncompletedTasks = _uncompletedTasks
      clone._processingTasks = _processingTasks
      clone._erroredTasks = _erroredTasks
      clone._completedTasks = _completedTasks
      clone._parent = _parent
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var display: String {
    get {return _storage._display}
    set {_uniqueStorage()._display = newValue}
  }

  public var flattenedTasks: [Org_Roylance_Yadel_Task] {
    get {return _storage._flattenedTasks}
    set {_uniqueStorage()._flattenedTasks = newValue}
  }

  public var executionDate: Int64 {
    get {return _storage._executionDate}
    set {_uniqueStorage()._executionDate = newValue}
  }

  public var startDate: Int64 {
    get {return _storage._startDate}
    set {_uniqueStorage()._startDate = newValue}
  }

  public var endDate: Int64 {
    get {return _storage._endDate}
    set {_uniqueStorage()._endDate = newValue}
  }

  public var duration: Int64 {
    get {return _storage._duration}
    set {_uniqueStorage()._duration = newValue}
  }

  public var uncompletedTasks: [Org_Roylance_Yadel_Task] {
    get {return _storage._uncompletedTasks}
    set {_uniqueStorage()._uncompletedTasks = newValue}
  }

  public var processingTasks: [Org_Roylance_Yadel_Task] {
    get {return _storage._processingTasks}
    set {_uniqueStorage()._processingTasks = newValue}
  }

  public var erroredTasks: [Org_Roylance_Yadel_Task] {
    get {return _storage._erroredTasks}
    set {_uniqueStorage()._erroredTasks = newValue}
  }

  public var completedTasks: [Org_Roylance_Yadel_Task] {
    get {return _storage._completedTasks}
    set {_uniqueStorage()._completedTasks = newValue}
  }

  public var parent: Org_Roylance_Yadel_Dag {
    get {return _storage._parent ?? Org_Roylance_Yadel_Dag()}
    set {_uniqueStorage()._parent = newValue}
  }
  public var hasParent: Bool {
    return _storage._parent != nil
  }
  public mutating func clearParent() {
    return _storage._parent = nil
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_Dag) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yadel_Task: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_Task"}
  public var protoMessageName: String {return "Task"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "display", swift: "display"),
    3: .same(proto: "dependencies", swift: "dependencies"),
    4: .unique(proto: "dag_id", json: "dagId", swift: "dagId"),
    5: .same(proto: "logs", swift: "logs"),
    6: .unique(proto: "execution_date", json: "executionDate", swift: "executionDate"),
    7: .unique(proto: "start_date", json: "startDate", swift: "startDate"),
    8: .unique(proto: "end_date", json: "endDate", swift: "endDate"),
    9: .same(proto: "duration", swift: "duration"),
    10: .unique(proto: "first_context_base_64", json: "firstContextBase64", swift: "firstContextBase64"),
    11: .unique(proto: "second_context_base_64", json: "secondContextBase64", swift: "secondContextBase64"),
    12: .unique(proto: "third_context_base_64", json: "thirdContextBase64", swift: "thirdContextBase64"),
    13: .unique(proto: "is_waiting_for_another_dag_task", json: "isWaitingForAnotherDagTask", swift: "isWaitingForAnotherDagTask"),
  ]


  public var id: String = ""

  public var display: String = ""

  public var dependencies: [Org_Roylance_Yadel_TaskDependency] = []

  public var dagId: String = ""

  public var logs: [Org_Roylance_Yadel_Log] = []

  public var executionDate: Int64 = 0

  public var startDate: Int64 = 0

  public var endDate: Int64 = 0

  public var duration: Int64 = 0

  public var firstContextBase64: String = ""

  public var secondContextBase64: String = ""

  public var thirdContextBase64: String = ""

  public var isWaitingForAnotherDagTask: Bool = false

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &display)
    case 3: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_TaskDependency.self, value: &dependencies)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &dagId)
    case 5: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_Log.self, value: &logs)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &executionDate)
    case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &startDate)
    case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &endDate)
    case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &duration)
    case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &firstContextBase64)
    case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &secondContextBase64)
    case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &thirdContextBase64)
    case 13: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isWaitingForAnotherDagTask)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
    if display != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: display, fieldNumber: 2)
    }
    if !dependencies.isEmpty {
      try visitor.visitRepeatedMessageField(value: dependencies, fieldNumber: 3)
    }
    if dagId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: dagId, fieldNumber: 4)
    }
    if !logs.isEmpty {
      try visitor.visitRepeatedMessageField(value: logs, fieldNumber: 5)
    }
    if executionDate != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: executionDate, fieldNumber: 6)
    }
    if startDate != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: startDate, fieldNumber: 7)
    }
    if endDate != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: endDate, fieldNumber: 8)
    }
    if duration != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: duration, fieldNumber: 9)
    }
    if firstContextBase64 != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: firstContextBase64, fieldNumber: 10)
    }
    if secondContextBase64 != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: secondContextBase64, fieldNumber: 11)
    }
    if thirdContextBase64 != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: thirdContextBase64, fieldNumber: 12)
    }
    if isWaitingForAnotherDagTask != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isWaitingForAnotherDagTask, fieldNumber: 13)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_Task) -> Bool {
    if id != other.id {return false}
    if display != other.display {return false}
    if dependencies != other.dependencies {return false}
    if dagId != other.dagId {return false}
    if logs != other.logs {return false}
    if executionDate != other.executionDate {return false}
    if startDate != other.startDate {return false}
    if endDate != other.endDate {return false}
    if duration != other.duration {return false}
    if firstContextBase64 != other.firstContextBase64 {return false}
    if secondContextBase64 != other.secondContextBase64 {return false}
    if thirdContextBase64 != other.thirdContextBase64 {return false}
    if isWaitingForAnotherDagTask != other.isWaitingForAnotherDagTask {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_TaskDependency: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_TaskDependency"}
  public var protoMessageName: String {return "TaskDependency"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .unique(proto: "parent_task_id", json: "parentTaskId", swift: "parentTaskId"),
  ]


  public var id: String = ""

  public var parentTaskId: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &parentTaskId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
    if parentTaskId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: parentTaskId, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_TaskDependency) -> Bool {
    if id != other.id {return false}
    if parentTaskId != other.parentTaskId {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_AddTaskToDag: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_AddTaskToDag"}
  public var protoMessageName: String {return "AddTaskToDag"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .unique(proto: "parent_task", json: "parentTask", swift: "parentTask"),
    3: .unique(proto: "new_task", json: "newTask", swift: "newTask"),
    4: .unique(proto: "first_context_base_64", json: "firstContextBase64", swift: "firstContextBase64"),
    5: .unique(proto: "second_context_base_64", json: "secondContextBase64", swift: "secondContextBase64"),
    6: .unique(proto: "third_context_base_64", json: "thirdContextBase64", swift: "thirdContextBase64"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yadel_AddTaskToDag
    var _id: String = ""
    var _parentTask: Org_Roylance_Yadel_Task? = nil
    var _newTask: Org_Roylance_Yadel_Task? = nil
    var _firstContextBase64: String = ""
    var _secondContextBase64: String = ""
    var _thirdContextBase64: String = ""

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_id)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yadel_Task.self, value: &_parentTask)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yadel_Task.self, value: &_newTask)
      case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_firstContextBase64)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_secondContextBase64)
      case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_thirdContextBase64)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _id != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _id, fieldNumber: 1)
      }
      if let v = _parentTask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _newTask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _firstContextBase64 != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _firstContextBase64, fieldNumber: 4)
      }
      if _secondContextBase64 != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _secondContextBase64, fieldNumber: 5)
      }
      if _thirdContextBase64 != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _thirdContextBase64, fieldNumber: 6)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _id != other._id {return false}
      if _parentTask != other._parentTask {return false}
      if _newTask != other._newTask {return false}
      if _firstContextBase64 != other._firstContextBase64 {return false}
      if _secondContextBase64 != other._secondContextBase64 {return false}
      if _thirdContextBase64 != other._thirdContextBase64 {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._id = _id
      clone._parentTask = _parentTask
      clone._newTask = _newTask
      clone._firstContextBase64 = _firstContextBase64
      clone._secondContextBase64 = _secondContextBase64
      clone._thirdContextBase64 = _thirdContextBase64
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var parentTask: Org_Roylance_Yadel_Task {
    get {return _storage._parentTask ?? Org_Roylance_Yadel_Task()}
    set {_uniqueStorage()._parentTask = newValue}
  }
  public var hasParentTask: Bool {
    return _storage._parentTask != nil
  }
  public mutating func clearParentTask() {
    return _storage._parentTask = nil
  }

  public var newTask: Org_Roylance_Yadel_Task {
    get {return _storage._newTask ?? Org_Roylance_Yadel_Task()}
    set {_uniqueStorage()._newTask = newValue}
  }
  public var hasNewTask: Bool {
    return _storage._newTask != nil
  }
  public mutating func clearNewTask() {
    return _storage._newTask = nil
  }

  public var firstContextBase64: String {
    get {return _storage._firstContextBase64}
    set {_uniqueStorage()._firstContextBase64 = newValue}
  }

  public var secondContextBase64: String {
    get {return _storage._secondContextBase64}
    set {_uniqueStorage()._secondContextBase64 = newValue}
  }

  public var thirdContextBase64: String {
    get {return _storage._thirdContextBase64}
    set {_uniqueStorage()._thirdContextBase64 = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_AddTaskToDag) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yadel_CompleteTask: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_CompleteTask"}
  public var protoMessageName: String {return "CompleteTask"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "task", swift: "task"),
    3: .unique(proto: "worker_configuration", json: "workerConfiguration", swift: "workerConfiguration"),
    5: .unique(proto: "is_error", json: "isError", swift: "isError"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yadel_CompleteTask
    var _id: String = ""
    var _task: Org_Roylance_Yadel_Task? = nil
    var _workerConfiguration: Org_Roylance_Yadel_WorkerConfiguration? = nil
    var _isError: Bool = false

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_id)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yadel_Task.self, value: &_task)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yadel_WorkerConfiguration.self, value: &_workerConfiguration)
      case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &_isError)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _id != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _id, fieldNumber: 1)
      }
      if let v = _task {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _workerConfiguration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _isError != false {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: _isError, fieldNumber: 5)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _id != other._id {return false}
      if _task != other._task {return false}
      if _workerConfiguration != other._workerConfiguration {return false}
      if _isError != other._isError {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._id = _id
      clone._task = _task
      clone._workerConfiguration = _workerConfiguration
      clone._isError = _isError
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var task: Org_Roylance_Yadel_Task {
    get {return _storage._task ?? Org_Roylance_Yadel_Task()}
    set {_uniqueStorage()._task = newValue}
  }
  public var hasTask: Bool {
    return _storage._task != nil
  }
  public mutating func clearTask() {
    return _storage._task = nil
  }

  public var workerConfiguration: Org_Roylance_Yadel_WorkerConfiguration {
    get {return _storage._workerConfiguration ?? Org_Roylance_Yadel_WorkerConfiguration()}
    set {_uniqueStorage()._workerConfiguration = newValue}
  }
  public var hasWorkerConfiguration: Bool {
    return _storage._workerConfiguration != nil
  }
  public mutating func clearWorkerConfiguration() {
    return _storage._workerConfiguration = nil
  }

  public var isError: Bool {
    get {return _storage._isError}
    set {_uniqueStorage()._isError = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_CompleteTask) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yadel_AllDags: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_AllDags"}
  public var protoMessageName: String {return "AllDags"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "dags", swift: "dags"),
    2: .same(proto: "workers", swift: "workers"),
    3: .unique(proto: "include_unprocessed", json: "includeUnprocessed", swift: "includeUnprocessed"),
    4: .unique(proto: "include_file_saved", json: "includeFileSaved", swift: "includeFileSaved"),
  ]


  public var dags: [Org_Roylance_Yadel_Dag] = []

  public var workers: [Org_Roylance_Yadel_WorkerConfiguration] = []

  public var includeUnprocessed: Bool = false

  public var includeFileSaved: Bool = false

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_Dag.self, value: &dags)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_WorkerConfiguration.self, value: &workers)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &includeUnprocessed)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &includeFileSaved)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !dags.isEmpty {
      try visitor.visitRepeatedMessageField(value: dags, fieldNumber: 1)
    }
    if !workers.isEmpty {
      try visitor.visitRepeatedMessageField(value: workers, fieldNumber: 2)
    }
    if includeUnprocessed != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: includeUnprocessed, fieldNumber: 3)
    }
    if includeFileSaved != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: includeFileSaved, fieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_AllDags) -> Bool {
    if dags != other.dags {return false}
    if workers != other.workers {return false}
    if includeUnprocessed != other.includeUnprocessed {return false}
    if includeFileSaved != other.includeFileSaved {return false}
    return true
  }
}
