/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: yadel_report.proto
 *
 */

import Foundation
import SwiftProtobuf


public enum Org_Roylance_Yadel_UIYadelRequestType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case reportDags // = 0
  case deleteDag // = 1
  case getDagStatus // = 2
  case reportDagsActive // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .reportDags
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .reportDags
    case 1: self = .deleteDag
    case 2: self = .getDagStatus
    case 3: self = .reportDagsActive
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "reportDags": self = .reportDags
    case "deleteDag": self = .deleteDag
    case "getDagStatus": self = .getDagStatus
    case "reportDagsActive": self = .reportDagsActive
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "REPORT_DAGS": self = .reportDags
    case "DELETE_DAG": self = .deleteDag
    case "GET_DAG_STATUS": self = .getDagStatus
    case "REPORT_DAGS_ACTIVE": self = .reportDagsActive
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "REPORT_DAGS": self = .reportDags
    case "DELETE_DAG": self = .deleteDag
    case "GET_DAG_STATUS": self = .getDagStatus
    case "REPORT_DAGS_ACTIVE": self = .reportDagsActive
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .reportDags: return 0
      case .deleteDag: return 1
      case .getDagStatus: return 2
      case .reportDagsActive: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .reportDags: return "\"REPORT_DAGS\""
      case .deleteDag: return "\"DELETE_DAG\""
      case .getDagStatus: return "\"GET_DAG_STATUS\""
      case .reportDagsActive: return "\"REPORT_DAGS_ACTIVE\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .reportDags: return ".reportDags"
      case .deleteDag: return ".deleteDag"
      case .getDagStatus: return ".getDagStatus"
      case .reportDagsActive: return ".reportDagsActive"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public enum Org_Roylance_Yadel_UIWorkerState: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case currentlyWorking // = 0
  case currentlyIdle // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .currentlyWorking
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .currentlyWorking
    case 1: self = .currentlyIdle
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public init?(name: String) {
    switch name {
    case "currentlyWorking": self = .currentlyWorking
    case "currentlyIdle": self = .currentlyIdle
    default: return nil
    }
  }

  public init?(jsonName: String) {
    switch jsonName {
    case "CURRENTLY_WORKING": self = .currentlyWorking
    case "CURRENTLY_IDLE": self = .currentlyIdle
    default: return nil
    }
  }

  public init?(protoName: String) {
    switch protoName {
    case "CURRENTLY_WORKING": self = .currentlyWorking
    case "CURRENTLY_IDLE": self = .currentlyIdle
    default: return nil
    }
  }

  public var rawValue: Int {
    get {
      switch self {
      case .currentlyWorking: return 0
      case .currentlyIdle: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  public var json: String {
    get {
      switch self {
      case .currentlyWorking: return "\"CURRENTLY_WORKING\""
      case .currentlyIdle: return "\"CURRENTLY_IDLE\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  public var hashValue: Int { return rawValue }

  public var debugDescription: String {
    get {
      switch self {
      case .currentlyWorking: return ".currentlyWorking"
      case .currentlyIdle: return ".currentlyIdle"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

public struct Org_Roylance_Yadel_UIYadelRequest: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_UIYadelRequest"}
  public var protoMessageName: String {return "UIYadelRequest"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "request_type", json: "requestType", swift: "requestType"),
    2: .unique(proto: "dag_id", json: "dagId", swift: "dagId"),
    3: .same(proto: "token", swift: "token"),
    4: .unique(proto: "user_name", json: "userName", swift: "userName"),
    5: .same(proto: "password", swift: "password"),
  ]


  public var requestType: Org_Roylance_Yadel_UIYadelRequestType = Org_Roylance_Yadel_UIYadelRequestType.reportDags

  public var dagId: String = ""

  public var token: String = ""

  public var userName: String = ""

  public var password: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Org_Roylance_Yadel_UIYadelRequestType.self, value: &requestType)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &dagId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &token)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userName)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &password)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if requestType != Org_Roylance_Yadel_UIYadelRequestType.reportDags {
      try visitor.visitSingularField(fieldType: Org_Roylance_Yadel_UIYadelRequestType.self, value: requestType, fieldNumber: 1)
    }
    if dagId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: dagId, fieldNumber: 2)
    }
    if token != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: token, fieldNumber: 3)
    }
    if userName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userName, fieldNumber: 4)
    }
    if password != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: password, fieldNumber: 5)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_UIYadelRequest) -> Bool {
    if requestType != other.requestType {return false}
    if dagId != other.dagId {return false}
    if token != other.token {return false}
    if userName != other.userName {return false}
    if password != other.password {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_UIYadelResponse: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_UIYadelResponse"}
  public var protoMessageName: String {return "UIYadelResponse"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "content", swift: "content"),
    2: .same(proto: "report", swift: "report"),
    3: .same(proto: "dag", swift: "dag"),
    4: .same(proto: "configurations", swift: "configurations"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Org_Roylance_Yadel_UIYadelResponse
    var _content: String = ""
    var _report: Org_Roylance_Yadel_UIDagReport? = nil
    var _dag: Org_Roylance_Yadel_UIDag? = nil
    var _configurations: [Org_Roylance_Yadel_UIWorkerConfiguration] = []

    init() {}

    func decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_content)
      case 2: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yadel_UIDagReport.self, value: &_report)
      case 3: try setter.decodeSingularMessageField(fieldType: Org_Roylance_Yadel_UIDag.self, value: &_dag)
      case 4: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_UIWorkerConfiguration.self, value: &_configurations)
      default: break
      }
    }

    func traverse(visitor: SwiftProtobuf.Visitor) throws {
      if _content != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _content, fieldNumber: 1)
      }
      if let v = _report {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _dag {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_configurations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _configurations, fieldNumber: 4)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _content != other._content {return false}
      if _report != other._report {return false}
      if _dag != other._dag {return false}
      if _configurations != other._configurations {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._content = _content
      clone._report = _report
      clone._dag = _dag
      clone._configurations = _configurations
      return clone
    }
  }

  private var _storage = _StorageClass()


  public var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  public var report: Org_Roylance_Yadel_UIDagReport {
    get {return _storage._report ?? Org_Roylance_Yadel_UIDagReport()}
    set {_uniqueStorage()._report = newValue}
  }
  public var hasReport: Bool {
    return _storage._report != nil
  }
  public mutating func clearReport() {
    return _storage._report = nil
  }

  public var dag: Org_Roylance_Yadel_UIDag {
    get {return _storage._dag ?? Org_Roylance_Yadel_UIDag()}
    set {_uniqueStorage()._dag = newValue}
  }
  public var hasDag: Bool {
    return _storage._dag != nil
  }
  public mutating func clearDag() {
    return _storage._dag = nil
  }

  public var configurations: [Org_Roylance_Yadel_UIWorkerConfiguration] {
    get {return _storage._configurations}
    set {_uniqueStorage()._configurations = newValue}
  }

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: visitor)
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_UIYadelResponse) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Org_Roylance_Yadel_UIDagReport: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_UIDagReport"}
  public var protoMessageName: String {return "UIDagReport"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "workers", swift: "workers"),
    2: .same(proto: "dags", swift: "dags"),
    3: .unique(proto: "used_manager_memory", json: "usedManagerMemory", swift: "usedManagerMemory"),
    4: .unique(proto: "total_manager_memory", json: "totalManagerMemory", swift: "totalManagerMemory"),
    5: .unique(proto: "active_dags", json: "activeDags", swift: "activeDags"),
    6: .unique(proto: "unprocessed_dags", json: "unprocessedDags", swift: "unprocessedDags"),
    7: .unique(proto: "saved_dags", json: "savedDags", swift: "savedDags"),
  ]


  public var workers: [Org_Roylance_Yadel_UIWorkerConfiguration] = []

  public var dags: [Org_Roylance_Yadel_UIDag] = []

  public var usedManagerMemory: String = ""

  public var totalManagerMemory: String = ""

  public var activeDags: Int32 = 0

  public var unprocessedDags: Int32 = 0

  public var savedDags: Int32 = 0

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_UIWorkerConfiguration.self, value: &workers)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_UIDag.self, value: &dags)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &usedManagerMemory)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &totalManagerMemory)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &activeDags)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &unprocessedDags)
    case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &savedDags)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if !workers.isEmpty {
      try visitor.visitRepeatedMessageField(value: workers, fieldNumber: 1)
    }
    if !dags.isEmpty {
      try visitor.visitRepeatedMessageField(value: dags, fieldNumber: 2)
    }
    if usedManagerMemory != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: usedManagerMemory, fieldNumber: 3)
    }
    if totalManagerMemory != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: totalManagerMemory, fieldNumber: 4)
    }
    if activeDags != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: activeDags, fieldNumber: 5)
    }
    if unprocessedDags != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: unprocessedDags, fieldNumber: 6)
    }
    if savedDags != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: savedDags, fieldNumber: 7)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_UIDagReport) -> Bool {
    if workers != other.workers {return false}
    if dags != other.dags {return false}
    if usedManagerMemory != other.usedManagerMemory {return false}
    if totalManagerMemory != other.totalManagerMemory {return false}
    if activeDags != other.activeDags {return false}
    if unprocessedDags != other.unprocessedDags {return false}
    if savedDags != other.savedDags {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_UIDag: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_UIDag"}
  public var protoMessageName: String {return "UIDag"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "display", swift: "display"),
    3: .same(proto: "nodes", swift: "nodes"),
    4: .same(proto: "edges", swift: "edges"),
    5: .unique(proto: "is_completed", json: "isCompleted", swift: "isCompleted"),
    6: .unique(proto: "is_processing", json: "isProcessing", swift: "isProcessing"),
    7: .unique(proto: "is_error", json: "isError", swift: "isError"),
    8: .same(proto: "logs", swift: "logs"),
    9: .unique(proto: "number_completed", json: "numberCompleted", swift: "numberCompleted"),
    10: .unique(proto: "number_processing", json: "numberProcessing", swift: "numberProcessing"),
    11: .unique(proto: "number_errored", json: "numberErrored", swift: "numberErrored"),
    12: .unique(proto: "number_unprocessed", json: "numberUnprocessed", swift: "numberUnprocessed"),
    13: .same(proto: "children", swift: "children"),
  ]


  public var id: String = ""

  public var display: String = ""

  public var nodes: [Org_Roylance_Yadel_UINode] = []

  public var edges: [Org_Roylance_Yadel_UIEdge] = []

  public var isCompleted: Bool = false

  public var isProcessing: Bool = false

  public var isError: Bool = false

  public var logs: [String] = []

  public var numberCompleted: Int32 = 0

  public var numberProcessing: Int32 = 0

  public var numberErrored: Int32 = 0

  public var numberUnprocessed: Int32 = 0

  public var children: [Org_Roylance_Yadel_UIDag] = []

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &display)
    case 3: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_UINode.self, value: &nodes)
    case 4: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_UIEdge.self, value: &edges)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isCompleted)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isProcessing)
    case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isError)
    case 8: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &logs)
    case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &numberCompleted)
    case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &numberProcessing)
    case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &numberErrored)
    case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &numberUnprocessed)
    case 13: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_UIDag.self, value: &children)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
    if display != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: display, fieldNumber: 2)
    }
    if !nodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: nodes, fieldNumber: 3)
    }
    if !edges.isEmpty {
      try visitor.visitRepeatedMessageField(value: edges, fieldNumber: 4)
    }
    if isCompleted != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isCompleted, fieldNumber: 5)
    }
    if isProcessing != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isProcessing, fieldNumber: 6)
    }
    if isError != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isError, fieldNumber: 7)
    }
    if !logs.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: logs, fieldNumber: 8)
    }
    if numberCompleted != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: numberCompleted, fieldNumber: 9)
    }
    if numberProcessing != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: numberProcessing, fieldNumber: 10)
    }
    if numberErrored != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: numberErrored, fieldNumber: 11)
    }
    if numberUnprocessed != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: numberUnprocessed, fieldNumber: 12)
    }
    if !children.isEmpty {
      try visitor.visitRepeatedMessageField(value: children, fieldNumber: 13)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_UIDag) -> Bool {
    if id != other.id {return false}
    if display != other.display {return false}
    if nodes != other.nodes {return false}
    if edges != other.edges {return false}
    if isCompleted != other.isCompleted {return false}
    if isProcessing != other.isProcessing {return false}
    if isError != other.isError {return false}
    if logs != other.logs {return false}
    if numberCompleted != other.numberCompleted {return false}
    if numberProcessing != other.numberProcessing {return false}
    if numberErrored != other.numberErrored {return false}
    if numberUnprocessed != other.numberUnprocessed {return false}
    if children != other.children {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_UIEdge: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_UIEdge"}
  public var protoMessageName: String {return "UIEdge"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "node_id_1", json: "nodeId1", swift: "nodeId1"),
    2: .unique(proto: "node_id_2", json: "nodeId2", swift: "nodeId2"),
  ]


  public var nodeId1: String = ""

  public var nodeId2: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &nodeId1)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &nodeId2)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if nodeId1 != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: nodeId1, fieldNumber: 1)
    }
    if nodeId2 != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: nodeId2, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_UIEdge) -> Bool {
    if nodeId1 != other.nodeId1 {return false}
    if nodeId2 != other.nodeId2 {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_UINode: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_UINode"}
  public var protoMessageName: String {return "UINode"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "display", swift: "display"),
    4: .unique(proto: "execution_date", json: "executionDate", swift: "executionDate"),
    5: .unique(proto: "start_date", json: "startDate", swift: "startDate"),
    6: .unique(proto: "end_date", json: "endDate", swift: "endDate"),
    7: .same(proto: "duration", swift: "duration"),
    8: .unique(proto: "is_completed", json: "isCompleted", swift: "isCompleted"),
    9: .unique(proto: "is_processing", json: "isProcessing", swift: "isProcessing"),
    10: .unique(proto: "is_error", json: "isError", swift: "isError"),
    11: .same(proto: "logs", swift: "logs"),
    12: .unique(proto: "is_waiting_for_another_dag_task", json: "isWaitingForAnotherDagTask", swift: "isWaitingForAnotherDagTask"),
  ]


  public var id: String = ""

  public var display: String = ""

  public var executionDate: Int64 = 0

  public var startDate: Int64 = 0

  public var endDate: Int64 = 0

  public var duration: Int64 = 0

  public var isCompleted: Bool = false

  public var isProcessing: Bool = false

  public var isError: Bool = false

  public var logs: [Org_Roylance_Yadel_UILog] = []

  public var isWaitingForAnotherDagTask: Bool = false

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &display)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &executionDate)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &startDate)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &endDate)
    case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &duration)
    case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isCompleted)
    case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isProcessing)
    case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isError)
    case 11: try setter.decodeRepeatedMessageField(fieldType: Org_Roylance_Yadel_UILog.self, value: &logs)
    case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isWaitingForAnotherDagTask)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
    if display != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: display, fieldNumber: 2)
    }
    if executionDate != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: executionDate, fieldNumber: 4)
    }
    if startDate != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: startDate, fieldNumber: 5)
    }
    if endDate != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: endDate, fieldNumber: 6)
    }
    if duration != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: duration, fieldNumber: 7)
    }
    if isCompleted != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isCompleted, fieldNumber: 8)
    }
    if isProcessing != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isProcessing, fieldNumber: 9)
    }
    if isError != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isError, fieldNumber: 10)
    }
    if !logs.isEmpty {
      try visitor.visitRepeatedMessageField(value: logs, fieldNumber: 11)
    }
    if isWaitingForAnotherDagTask != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isWaitingForAnotherDagTask, fieldNumber: 12)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_UINode) -> Bool {
    if id != other.id {return false}
    if display != other.display {return false}
    if executionDate != other.executionDate {return false}
    if startDate != other.startDate {return false}
    if endDate != other.endDate {return false}
    if duration != other.duration {return false}
    if isCompleted != other.isCompleted {return false}
    if isProcessing != other.isProcessing {return false}
    if isError != other.isError {return false}
    if logs != other.logs {return false}
    if isWaitingForAnotherDagTask != other.isWaitingForAnotherDagTask {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_UILog: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_UILog"}
  public var protoMessageName: String {return "UILog"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "message", swift: "message"),
  ]


  public var id: String = ""

  public var message: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &message)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, fieldNumber: 1)
    }
    if message != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: message, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_UILog) -> Bool {
    if id != other.id {return false}
    if message != other.message {return false}
    return true
  }
}

public struct Org_Roylance_Yadel_UIWorkerConfiguration: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Org_Roylance_Yadel_UIWorkerConfiguration"}
  public var protoMessageName: String {return "UIWorkerConfiguration"}
  public var protoPackageName: String {return "org.roylance.yadel"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "ip", swift: "ip"),
    2: .same(proto: "port", swift: "port"),
    3: .same(proto: "host", swift: "host"),
    4: .unique(proto: "initialized_time", json: "initializedTime", swift: "initializedTime"),
    5: .same(proto: "state", swift: "state"),
    6: .unique(proto: "task_display", json: "taskDisplay", swift: "taskDisplay"),
    7: .unique(proto: "dag_display", json: "dagDisplay", swift: "dagDisplay"),
    8: .unique(proto: "minutes_before_task_reset", json: "minutesBeforeTaskReset", swift: "minutesBeforeTaskReset"),
    9: .unique(proto: "task_start_time", json: "taskStartTime", swift: "taskStartTime"),
    10: .unique(proto: "task_working_time_display", json: "taskWorkingTimeDisplay", swift: "taskWorkingTimeDisplay"),
  ]


  public var ip: String = ""

  public var port: String = ""

  public var host: String = ""

  public var initializedTime: String = ""

  public var state: Org_Roylance_Yadel_UIWorkerState = Org_Roylance_Yadel_UIWorkerState.currentlyWorking

  public var taskDisplay: String = ""

  public var dagDisplay: String = ""

  public var minutesBeforeTaskReset: UInt64 = 0

  public var taskStartTime: String = ""

  public var taskWorkingTimeDisplay: String = ""

  public init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &ip)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &port)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &host)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &initializedTime)
    case 5: try setter.decodeSingularField(fieldType: Org_Roylance_Yadel_UIWorkerState.self, value: &state)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &taskDisplay)
    case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &dagDisplay)
    case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: &minutesBeforeTaskReset)
    case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &taskStartTime)
    case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &taskWorkingTimeDisplay)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if ip != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: ip, fieldNumber: 1)
    }
    if port != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: port, fieldNumber: 2)
    }
    if host != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: host, fieldNumber: 3)
    }
    if initializedTime != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: initializedTime, fieldNumber: 4)
    }
    if state != Org_Roylance_Yadel_UIWorkerState.currentlyWorking {
      try visitor.visitSingularField(fieldType: Org_Roylance_Yadel_UIWorkerState.self, value: state, fieldNumber: 5)
    }
    if taskDisplay != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: taskDisplay, fieldNumber: 6)
    }
    if dagDisplay != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: dagDisplay, fieldNumber: 7)
    }
    if minutesBeforeTaskReset != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufUInt64.self, value: minutesBeforeTaskReset, fieldNumber: 8)
    }
    if taskStartTime != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: taskStartTime, fieldNumber: 9)
    }
    if taskWorkingTimeDisplay != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: taskWorkingTimeDisplay, fieldNumber: 10)
    }
  }

  public func _protoc_generated_isEqualTo(other: Org_Roylance_Yadel_UIWorkerConfiguration) -> Bool {
    if ip != other.ip {return false}
    if port != other.port {return false}
    if host != other.host {return false}
    if initializedTime != other.initializedTime {return false}
    if state != other.state {return false}
    if taskDisplay != other.taskDisplay {return false}
    if dagDisplay != other.dagDisplay {return false}
    if minutesBeforeTaskReset != other.minutesBeforeTaskReset {return false}
    if taskStartTime != other.taskStartTime {return false}
    if taskWorkingTimeDisplay != other.taskWorkingTimeDisplay {return false}
    return true
  }
}
