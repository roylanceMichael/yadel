// This file was auto-generated, but can be altered. It will not be overwritten.
buildscript {
    ext.kotlin_version = "$yaclib_kotlin"
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:$yaclib_artifacatory"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$yaclib_bintray"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$yaclib_kotlin"
    }
}

group "$group"
version "$major.$minor"

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'com.jfrog.bintray'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'cpp'

sourceCompatibility = 1.8

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

println "Building on OS: " + System.properties['os.name']
println "Using JDK: " + System.properties['java.home']

def SYS_INCLUDE_DIR = this.properties['system.include.dir']
def SYS_LOCAL_INCLUDE_DIR = this.properties['system.local.include.dir']
def JNI_INCLUDE_DIR = this.properties['jni.include.dir']
def JNI_LIB_DIR = this.properties['jni.lib.dir']

println "Using system include directory: " + SYS_INCLUDE_DIR
println "Using system local include directory: " + SYS_LOCAL_INCLUDE_DIR
println "Using JNI include directory: " + JNI_INCLUDE_DIR
println "Using JNI lib directory: " + JNI_LIB_DIR

model {
    components {
        bridge(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir 'src/main/jni'
                        include "**/*.cpp"
                    }
                }
            }
            buildTypes {
                debug
                release
            }
        }
    }
    toolChains {
        gcc(Gcc) {
            eachPlatform {
                if (System.properties['os.name'].equals('Mac OS X')) {
                    cppCompiler.withArguments { args ->
                        args << "-O2"
                        args << "-I" + SYS_INCLUDE_DIR
                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR + "/darwin"
                        args << "-std=c++11"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                        args << "-lc++"
                    }
                } else {
                    path "/opt/rh/devtoolset-2/root/usr/bin/gcc"
                    cppCompiler.withArguments { args ->
                        args << "-O2"
                        args << "-I" + SYS_INCLUDE_DIR
                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR + "/linux"
                        args << "-std=c++11"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                        args << "-lstdc++"
                    }
                }
            }
        }
        clang(Clang) {
            eachPlatform {
                if (System.properties['os.name'].equals('Mac OS X')) {
                    cppCompiler.withArguments { args ->
                        args << "-O2"
                        args << "-I" + SYS_INCLUDE_DIR
                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR + "/darwin"
                        args << "-std=c++11"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                        args << "-lc++"
                    }
                } else {
                    cppCompiler.withArguments { args ->
                        args << "-O2"
                        args << "-I" + SYS_INCLUDE_DIR
                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR + "/linux"
                        args << "-std=c++11"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                        args << "-lstdc++"
                    }
                }
            }
        }
    }
}

task copyLibBridge(type: Copy) {
    if (System.properties['os.name'].equals('Mac OS X')) {
        from "$projectDir/build/binaries/bridgeSharedLibrary/libbridge.dylib"
    }
    else {
        from "$projectDir/build/binaries/bridgeSharedLibrary/libbridge.so"
    }
    into 'libs'
}


bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['mavenJava']
    publish = true
    pkg {
        repo = "maven"
        name = "org.roylance.yadel.jni"
        userOrg = user
        licenses = ['MIT']
        labels = [rootProject.name]
        publicDownloadNumbers = true
        vcsUrl = 'https://github.com/roylanceMichael/yadel.git'
        version {
            name = "org.roylance.yadel.jni"
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'http://dl.bintray.com/roylancemichael/maven'}
    maven {
    url "http://dl.bintray.com/roylancemichael/maven"
}
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile "com.squareup.retrofit2:retrofit:$yaclib_retrofit"

    compile "org.roylance:common:$yaclib_roylance_common"
    compile "org.roylance.yadel:api:$org_roylance_yadel_api"

}
