/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(5);
	__webpack_require__(6);
	__webpack_require__(3);
	__webpack_require__(9);
	__webpack_require__(4);
	__webpack_require__(2);
	__webpack_require__(10);
	__webpack_require__(11);
	__webpack_require__(8);
	module.exports = __webpack_require__(7);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var local_url_1 = __webpack_require__(2);
	var main_1 = __webpack_require__(3);
	var dag_1 = __webpack_require__(4);
	// this file won't be overwritten, add more dependencies for angular as needed
	function furtherAngularSetup(app) {
	    var localUrlService = new local_url_1.LocalUrlService();
	    var mainControllerName = "mainController";
	    app.config(function ($routeProvider) {
	        $routeProvider
	            .when(localUrlService.main, {
	            templateUrl: "views/main.html",
	            controller: mainControllerName
	        })
	            .otherwise({
	            redirectTo: localUrlService.main
	        });
	    });
	    app.factory("dagService", function ($window, $http) {
	        return new dag_1.DagService();
	    });
	    app.controller(mainControllerName, ['$scope', '$http', '$log', 'httpExecute', 'dagService', 'reportService', 'yadelModel',
	        function ($scope, $http, $log, httpExecute, dagService, reportService, yadelModel) {
	            $scope.i = new main_1.MainController(reportService, dagService, yadelModel);
	        }]);
	}
	exports.furtherAngularSetup = furtherAngularSetup;


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	var LocalUrlService = (function () {
	    function LocalUrlService() {
	        this.main = "/main";
	    }
	    return LocalUrlService;
	}());
	exports.LocalUrlService = LocalUrlService;


/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";
	var MainController = (function () {
	    function MainController(reportService, dagService, protobufBuilder) {
	        this.dagReportNameSpace = "org.roylance.yadel.api.models.UIDagReport";
	        this.reportService = reportService;
	        this.dagService = dagService;
	        this.protobufBuilder = protobufBuilder;
	        this.refresh();
	    }
	    MainController.prototype.refresh = function () {
	        var self = this;
	        this.selectedDag = null;
	        this.currentDagReport = null;
	        var request = new this.protobufBuilder.UIYadelRequest();
	        this.reportService.current(request, function (response) {
	            self.currentDagReport = response.report;
	            if (self.currentDagReport.dags.length > 0) {
	                self.selectedDag = self.currentDagReport.dags[0];
	                self.onDagChange();
	            }
	        }, function (response) {
	            self.onDagChange();
	        });
	    };
	    MainController.prototype.onDagChange = function () {
	        if (this.selectedDag) {
	            this.dagService.buildTreeVisualization(this.selectedDag);
	        }
	    };
	    MainController.prototype.deleteDag = function () {
	        if (this.selectedDag) {
	            // delete the dag
	            var self_1 = this;
	            var request = new this.protobufBuilder.UIYadelRequest();
	            request.setRequestType(1 /* DELETE_DAG */);
	            request.dag_id = this.selectedDag.id;
	            this.reportService.delete_dag(request, function (response) {
	                self_1.refresh();
	            }, function (data) {
	                console.log(data);
	                self_1.refresh();
	            });
	        }
	    };
	    return MainController;
	}());
	exports.MainController = MainController;


/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	var DagService = (function () {
	    function DagService() {
	    }
	    DagService.prototype.buildTreeVisualization = function (dag) {
	        var arrange = "LR";
	        var g = new dagreD3.graphlib.Graph();
	        g.setGraph({});
	        g.setDefaultEdgeLabel(function () { return {}; });
	        for (var nodeIdx in dag.nodes) {
	            var node = dag.nodes[nodeIdx];
	            if (node.is_completed) {
	                g.setNode(node.id, { label: node.display, style: "fill: green" });
	            }
	            else if (node.is_processing) {
	                g.setNode(node.id, { label: node.display, style: "fill: gray" });
	            }
	            else if (node.is_error) {
	                g.setNode(node.id, { label: node.display, style: "fill: red" });
	            }
	            else {
	                g.setNode(node.id, { label: node.display, style: "fill: whitesmoke" });
	            }
	        }
	        for (var edgeIdx in dag.edges) {
	            g.setEdge(dag.edges[edgeIdx].node_id_2, dag.edges[edgeIdx].node_id_1);
	        }
	        var render = new dagreD3.render();
	        // todo: parameterize this more
	        var svg = d3.select("svg"), svgGroup = svg.append("g");
	        render(d3.select("svg g"), g);
	    };
	    return DagService;
	}());
	exports.DagService = DagService;


/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	var HttpExecute = (function () {
	    function HttpExecute(httpService) {
	        this.httpPost = "POST";
	        this.httpService = httpService;
	    }
	    HttpExecute.prototype.performPost = function (url, data, onSuccess, onError) {
	        this.httpService({
	            url: url,
	            method: this.httpPost,
	            data: data
	        }).success(onSuccess)
	            .error(onError);
	    };
	    return HttpExecute;
	}());
	exports.HttpExecute = HttpExecute;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	// THIS FILE WAS AUTO-GENERATED. DO NOT ALTER!
	/// <reference path="../node_modules/roylance.common/bytebuffer.d.ts" />
	var YadelModelFactory_1 = __webpack_require__(7);
	var ReportService_1 = __webpack_require__(8);
	var HttpExecute_1 = __webpack_require__(5);
	var FurtherAngularSetup_1 = __webpack_require__(1);
	var app = angular.module('jsapp', [
	    "ngRoute"
	]);
	app.factory("httpExecute", function ($window, $http) {
	    return new HttpExecute_1.HttpExecute($http);
	});
	app.factory("yadelModel", function () {
	    return YadelModelFactory_1.YadelModel.org.roylance.yadel;
	});
	app.factory("reportService", function (httpExecute, yadelModel) {
	    return new ReportService_1.ReportService(httpExecute, yadelModel);
	});
	FurtherAngularSetup_1.furtherAngularSetup(app);


/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";
	/// <reference path="./YadelModel.d.ts" />
	var _root = dcodeIO.ProtoBuf.newBuilder({})['import']({
	    "package": "org.roylance.yadel",
	    "messages": [
	        {
	            "name": "UIYadelRequest",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "UIYadelRequestType",
	                    "name": "request_type",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "dag_id",
	                    "id": 2
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "token",
	                    "id": 3
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "user_name",
	                    "id": 4
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "password",
	                    "id": 5
	                }
	            ]
	        },
	        {
	            "name": "UIYadelResponse",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "content",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "UIDagReport",
	                    "name": "report",
	                    "id": 2
	                },
	                {
	                    "rule": "optional",
	                    "type": "UIDag",
	                    "name": "dag",
	                    "id": 3
	                },
	                {
	                    "rule": "repeated",
	                    "type": "UIWorkerConfiguration",
	                    "name": "configurations",
	                    "id": 4
	                }
	            ]
	        },
	        {
	            "name": "UIDagReport",
	            "fields": [
	                {
	                    "rule": "repeated",
	                    "type": "UIWorkerConfiguration",
	                    "name": "workers",
	                    "id": 1
	                },
	                {
	                    "rule": "repeated",
	                    "type": "UIDag",
	                    "name": "dags",
	                    "id": 2
	                }
	            ]
	        },
	        {
	            "name": "UIDag",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "id",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "display",
	                    "id": 2
	                },
	                {
	                    "rule": "repeated",
	                    "type": "UINode",
	                    "name": "nodes",
	                    "id": 3
	                },
	                {
	                    "rule": "repeated",
	                    "type": "UIEdge",
	                    "name": "edges",
	                    "id": 4
	                },
	                {
	                    "rule": "optional",
	                    "type": "bool",
	                    "name": "is_completed",
	                    "id": 5
	                },
	                {
	                    "rule": "optional",
	                    "type": "bool",
	                    "name": "is_processing",
	                    "id": 6
	                },
	                {
	                    "rule": "optional",
	                    "type": "bool",
	                    "name": "is_error",
	                    "id": 7
	                },
	                {
	                    "rule": "repeated",
	                    "type": "string",
	                    "name": "logs",
	                    "id": 8
	                },
	                {
	                    "rule": "optional",
	                    "type": "int32",
	                    "name": "number_completed",
	                    "id": 9
	                },
	                {
	                    "rule": "optional",
	                    "type": "int32",
	                    "name": "number_processing",
	                    "id": 10
	                },
	                {
	                    "rule": "optional",
	                    "type": "int32",
	                    "name": "number_errored",
	                    "id": 11
	                },
	                {
	                    "rule": "optional",
	                    "type": "int32",
	                    "name": "number_unprocessed",
	                    "id": 12
	                },
	                {
	                    "rule": "repeated",
	                    "type": "UIDag",
	                    "name": "children",
	                    "id": 13
	                }
	            ]
	        },
	        {
	            "name": "UIEdge",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "node_id_1",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "node_id_2",
	                    "id": 2
	                }
	            ]
	        },
	        {
	            "name": "UINode",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "id",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "display",
	                    "id": 2
	                },
	                {
	                    "rule": "optional",
	                    "type": "int64",
	                    "name": "execution_date",
	                    "id": 4
	                },
	                {
	                    "rule": "optional",
	                    "type": "int64",
	                    "name": "start_date",
	                    "id": 5
	                },
	                {
	                    "rule": "optional",
	                    "type": "int64",
	                    "name": "end_date",
	                    "id": 6
	                },
	                {
	                    "rule": "optional",
	                    "type": "int64",
	                    "name": "duration",
	                    "id": 7
	                },
	                {
	                    "rule": "optional",
	                    "type": "bool",
	                    "name": "is_completed",
	                    "id": 8
	                },
	                {
	                    "rule": "optional",
	                    "type": "bool",
	                    "name": "is_processing",
	                    "id": 9
	                },
	                {
	                    "rule": "optional",
	                    "type": "bool",
	                    "name": "is_error",
	                    "id": 10
	                },
	                {
	                    "rule": "repeated",
	                    "type": "UILog",
	                    "name": "logs",
	                    "id": 11
	                },
	                {
	                    "rule": "optional",
	                    "type": "bool",
	                    "name": "is_waiting_for_another_dag_task",
	                    "id": 12
	                }
	            ]
	        },
	        {
	            "name": "UILog",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "id",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "message",
	                    "id": 2
	                }
	            ]
	        },
	        {
	            "name": "UIWorkerConfiguration",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "ip",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "port",
	                    "id": 2
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "host",
	                    "id": 3
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "initialized_time",
	                    "id": 4
	                },
	                {
	                    "rule": "optional",
	                    "type": "UIWorkerState",
	                    "name": "state",
	                    "id": 5
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "task_display",
	                    "id": 6
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "dag_display",
	                    "id": 7
	                },
	                {
	                    "rule": "optional",
	                    "type": "uint64",
	                    "name": "minutes_before_task_reset",
	                    "id": 8
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "task_start_time",
	                    "id": 9
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "task_working_time_display",
	                    "id": 10
	                }
	            ]
	        },
	        {
	            "name": "CommonAction",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "UIYadelRequest",
	                    "name": "request",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "UIYadelResponse",
	                    "name": "response",
	                    "id": 2
	                }
	            ]
	        },
	        {
	            "name": "ReportController",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "CommonAction",
	                    "name": "delete_dag",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "CommonAction",
	                    "name": "current",
	                    "id": 2
	                },
	                {
	                    "rule": "optional",
	                    "type": "CommonAction",
	                    "name": "get_dag_status",
	                    "id": 3
	                }
	            ]
	        },
	        {
	            "name": "WorkerConfiguration",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "id",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "ip",
	                    "id": 2
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "port",
	                    "id": 3
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "host",
	                    "id": 4
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "initialized_time",
	                    "id": 5
	                },
	                {
	                    "rule": "optional",
	                    "type": "WorkerState",
	                    "name": "state",
	                    "id": 6
	                },
	                {
	                    "rule": "optional",
	                    "type": "Task",
	                    "name": "task",
	                    "id": 7
	                },
	                {
	                    "rule": "optional",
	                    "type": "Dag",
	                    "name": "dag",
	                    "id": 8
	                },
	                {
	                    "rule": "optional",
	                    "type": "uint64",
	                    "name": "minutes_before_task_reset",
	                    "id": 9
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "task_start_time",
	                    "id": 10
	                }
	            ]
	        },
	        {
	            "name": "Log",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "id",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "message",
	                    "id": 2
	                }
	            ]
	        },
	        {
	            "name": "Dag",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "id",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "display",
	                    "id": 2
	                },
	                {
	                    "rule": "repeated",
	                    "type": "Task",
	                    "name": "flattened_tasks",
	                    "id": 3
	                },
	                {
	                    "rule": "optional",
	                    "type": "int64",
	                    "name": "execution_date",
	                    "id": 4
	                },
	                {
	                    "rule": "optional",
	                    "type": "int64",
	                    "name": "start_date",
	                    "id": 5
	                },
	                {
	                    "rule": "optional",
	                    "type": "int64",
	                    "name": "end_date",
	                    "id": 6
	                },
	                {
	                    "rule": "optional",
	                    "type": "int64",
	                    "name": "duration",
	                    "id": 7
	                },
	                {
	                    "rule": "repeated",
	                    "type": "Task",
	                    "name": "uncompleted_tasks",
	                    "id": 8
	                },
	                {
	                    "rule": "repeated",
	                    "type": "Task",
	                    "name": "processing_tasks",
	                    "id": 9
	                },
	                {
	                    "rule": "repeated",
	                    "type": "Task",
	                    "name": "errored_tasks",
	                    "id": 10
	                },
	                {
	                    "rule": "repeated",
	                    "type": "Task",
	                    "name": "completed_tasks",
	                    "id": 11
	                },
	                {
	                    "rule": "optional",
	                    "type": "Dag",
	                    "name": "parent",
	                    "id": 12
	                }
	            ]
	        },
	        {
	            "name": "Task",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "id",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "display",
	                    "id": 2
	                },
	                {
	                    "rule": "repeated",
	                    "type": "TaskDependency",
	                    "name": "dependencies",
	                    "id": 3
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "dag_id",
	                    "id": 4
	                },
	                {
	                    "rule": "repeated",
	                    "type": "Log",
	                    "name": "logs",
	                    "id": 5
	                },
	                {
	                    "rule": "optional",
	                    "type": "int64",
	                    "name": "execution_date",
	                    "id": 6
	                },
	                {
	                    "rule": "optional",
	                    "type": "int64",
	                    "name": "start_date",
	                    "id": 7
	                },
	                {
	                    "rule": "optional",
	                    "type": "int64",
	                    "name": "end_date",
	                    "id": 8
	                },
	                {
	                    "rule": "optional",
	                    "type": "int64",
	                    "name": "duration",
	                    "id": 9
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "first_context_base_64",
	                    "id": 10
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "second_context_base_64",
	                    "id": 11
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "third_context_base_64",
	                    "id": 12
	                },
	                {
	                    "rule": "optional",
	                    "type": "bool",
	                    "name": "is_waiting_for_another_dag_task",
	                    "id": 13
	                }
	            ]
	        },
	        {
	            "name": "TaskDependency",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "id",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "parent_task_id",
	                    "id": 2
	                }
	            ]
	        },
	        {
	            "name": "AddTaskToDag",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "id",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "Task",
	                    "name": "parent_task",
	                    "id": 2
	                },
	                {
	                    "rule": "optional",
	                    "type": "Task",
	                    "name": "new_task",
	                    "id": 3
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "first_context_base_64",
	                    "id": 4
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "second_context_base_64",
	                    "id": 5
	                },
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "third_context_base_64",
	                    "id": 6
	                }
	            ]
	        },
	        {
	            "name": "CompleteTask",
	            "fields": [
	                {
	                    "rule": "optional",
	                    "type": "string",
	                    "name": "id",
	                    "id": 1
	                },
	                {
	                    "rule": "optional",
	                    "type": "Task",
	                    "name": "task",
	                    "id": 2
	                },
	                {
	                    "rule": "optional",
	                    "type": "WorkerConfiguration",
	                    "name": "worker_configuration",
	                    "id": 3
	                },
	                {
	                    "rule": "optional",
	                    "type": "bool",
	                    "name": "is_error",
	                    "id": 5
	                }
	            ]
	        },
	        {
	            "name": "AllDags",
	            "fields": [
	                {
	                    "rule": "repeated",
	                    "type": "Dag",
	                    "name": "dags",
	                    "id": 1
	                },
	                {
	                    "rule": "repeated",
	                    "type": "WorkerConfiguration",
	                    "name": "workers",
	                    "id": 2
	                }
	            ]
	        }
	    ],
	    "enums": [
	        {
	            "name": "UIYadelRequestType",
	            "values": [
	                {
	                    "name": "REPORT_DAGS",
	                    "id": 0
	                },
	                {
	                    "name": "DELETE_DAG",
	                    "id": 1
	                },
	                {
	                    "name": "GET_DAG_STATUS",
	                    "id": 2
	                }
	            ]
	        },
	        {
	            "name": "UIWorkerState",
	            "values": [
	                {
	                    "name": "CURRENTLY_WORKING",
	                    "id": 0
	                },
	                {
	                    "name": "CURRENTLY_IDLE",
	                    "id": 1
	                }
	            ]
	        },
	        {
	            "name": "WorkerState",
	            "values": [
	                {
	                    "name": "WORKING",
	                    "id": 0
	                },
	                {
	                    "name": "IDLE",
	                    "id": 1
	                }
	            ]
	        },
	        {
	            "name": "WorkerToManagerMessageType",
	            "values": [
	                {
	                    "name": "REGISTRATION",
	                    "id": 0
	                }
	            ]
	        },
	        {
	            "name": "ManagerToManagerMessageType",
	            "values": [
	                {
	                    "name": "ENSURE_WORKERS_WORKING",
	                    "id": 0
	                }
	            ]
	        },
	        {
	            "name": "ActorRole",
	            "values": [
	                {
	                    "name": "MANAGER",
	                    "id": 0
	                },
	                {
	                    "name": "WORKER",
	                    "id": 1
	                }
	            ]
	        }
	    ]
	}).build();
	exports.YadelModel = _root;


/***/ },
/* 8 */
/***/ function(module, exports) {

	"use strict";
	var ReportService = (function () {
	    function ReportService(httpExecute, modelFactory) {
	        this.httpExecute = httpExecute;
	        this.modelFactory = modelFactory;
	    }
	    ReportService.prototype.delete_dag = function (request, onSuccess, onError) {
	        var self = this;
	        this.httpExecute.performPost("/rest/report/delete-dag", request.toBase64(), function (result) {
	            onSuccess(self.modelFactory.UIYadelResponse.decode64(result));
	        }, onError);
	    };
	    ReportService.prototype.current = function (request, onSuccess, onError) {
	        var self = this;
	        this.httpExecute.performPost("/rest/report/current", request.toBase64(), function (result) {
	            onSuccess(self.modelFactory.UIYadelResponse.decode64(result));
	        }, onError);
	    };
	    ReportService.prototype.get_dag_status = function (request, onSuccess, onError) {
	        var self = this;
	        this.httpExecute.performPost("/rest/report/get-dag-status", request.toBase64(), function (result) {
	            onSuccess(self.modelFactory.UIYadelResponse.decode64(result));
	        }, onError);
	    };
	    return ReportService;
	}());
	exports.ReportService = ReportService;


/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";
	/// <reference path="../../node_modules/org.roylance.yadel.api/YadelModel" />


/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";


/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";


/***/ }
/******/ ]);