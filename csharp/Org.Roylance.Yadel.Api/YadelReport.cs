// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yadel_report.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.Roylance.Yadel {

  /// <summary>Holder for reflection information generated from yadel_report.proto</summary>
  public static partial class YadelReportReflection {

    #region Descriptor
    /// <summary>File descriptor for yadel_report.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YadelReportReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJ5YWRlbF9yZXBvcnQucHJvdG8SEm9yZy5yb3lsYW5jZS55YWRlbCKSAQoO",
            "VUlZYWRlbFJlcXVlc3QSPAoMcmVxdWVzdF90eXBlGAEgASgOMiYub3JnLnJv",
            "eWxhbmNlLnlhZGVsLlVJWWFkZWxSZXF1ZXN0VHlwZRIOCgZkYWdfaWQYAiAB",
            "KAkSDQoFdG9rZW4YAyABKAkSEQoJdXNlcl9uYW1lGAQgASgJEhAKCHBhc3N3",
            "b3JkGAUgASgJIr4BCg9VSVlhZGVsUmVzcG9uc2USDwoHY29udGVudBgBIAEo",
            "CRIvCgZyZXBvcnQYAiABKAsyHy5vcmcucm95bGFuY2UueWFkZWwuVUlEYWdS",
            "ZXBvcnQSJgoDZGFnGAMgASgLMhkub3JnLnJveWxhbmNlLnlhZGVsLlVJRGFn",
            "EkEKDmNvbmZpZ3VyYXRpb25zGAQgAygLMikub3JnLnJveWxhbmNlLnlhZGVs",
            "LlVJV29ya2VyQ29uZmlndXJhdGlvbiLwAQoLVUlEYWdSZXBvcnQSOgoHd29y",
            "a2VycxgBIAMoCzIpLm9yZy5yb3lsYW5jZS55YWRlbC5VSVdvcmtlckNvbmZp",
            "Z3VyYXRpb24SJwoEZGFncxgCIAMoCzIZLm9yZy5yb3lsYW5jZS55YWRlbC5V",
            "SURhZxIbChN1c2VkX21hbmFnZXJfbWVtb3J5GAMgASgJEhwKFHRvdGFsX21h",
            "bmFnZXJfbWVtb3J5GAQgASgJEhMKC2FjdGl2ZV9kYWdzGAUgASgFEhgKEHVu",
            "cHJvY2Vzc2VkX2RhZ3MYBiABKAUSEgoKc2F2ZWRfZGFncxgHIAEoBSLdAgoF",
            "VUlEYWcSCgoCaWQYASABKAkSDwoHZGlzcGxheRgCIAEoCRIpCgVub2RlcxgD",
            "IAMoCzIaLm9yZy5yb3lsYW5jZS55YWRlbC5VSU5vZGUSKQoFZWRnZXMYBCAD",
            "KAsyGi5vcmcucm95bGFuY2UueWFkZWwuVUlFZGdlEhQKDGlzX2NvbXBsZXRl",
            "ZBgFIAEoCBIVCg1pc19wcm9jZXNzaW5nGAYgASgIEhAKCGlzX2Vycm9yGAcg",
            "ASgIEgwKBGxvZ3MYCCADKAkSGAoQbnVtYmVyX2NvbXBsZXRlZBgJIAEoBRIZ",
            "ChFudW1iZXJfcHJvY2Vzc2luZxgKIAEoBRIWCg5udW1iZXJfZXJyb3JlZBgL",
            "IAEoBRIaChJudW1iZXJfdW5wcm9jZXNzZWQYDCABKAUSKwoIY2hpbGRyZW4Y",
            "DSADKAsyGS5vcmcucm95bGFuY2UueWFkZWwuVUlEYWciLgoGVUlFZGdlEhEK",
            "CW5vZGVfaWRfMRgBIAEoCRIRCglub2RlX2lkXzIYAiABKAkihgIKBlVJTm9k",
            "ZRIKCgJpZBgBIAEoCRIPCgdkaXNwbGF5GAIgASgJEhYKDmV4ZWN1dGlvbl9k",
            "YXRlGAQgASgDEhIKCnN0YXJ0X2RhdGUYBSABKAMSEAoIZW5kX2RhdGUYBiAB",
            "KAMSEAoIZHVyYXRpb24YByABKAMSFAoMaXNfY29tcGxldGVkGAggASgIEhUK",
            "DWlzX3Byb2Nlc3NpbmcYCSABKAgSEAoIaXNfZXJyb3IYCiABKAgSJwoEbG9n",
            "cxgLIAMoCzIZLm9yZy5yb3lsYW5jZS55YWRlbC5VSUxvZxInCh9pc193YWl0",
            "aW5nX2Zvcl9hbm90aGVyX2RhZ190YXNrGAwgASgIIiQKBVVJTG9nEgoKAmlk",
            "GAEgASgJEg8KB21lc3NhZ2UYAiABKAkilQIKFVVJV29ya2VyQ29uZmlndXJh",
            "dGlvbhIKCgJpcBgBIAEoCRIMCgRwb3J0GAIgASgJEgwKBGhvc3QYAyABKAkS",
            "GAoQaW5pdGlhbGl6ZWRfdGltZRgEIAEoCRIwCgVzdGF0ZRgFIAEoDjIhLm9y",
            "Zy5yb3lsYW5jZS55YWRlbC5VSVdvcmtlclN0YXRlEhQKDHRhc2tfZGlzcGxh",
            "eRgGIAEoCRITCgtkYWdfZGlzcGxheRgHIAEoCRIhChltaW51dGVzX2JlZm9y",
            "ZV90YXNrX3Jlc2V0GAggASgEEhcKD3Rhc2tfc3RhcnRfdGltZRgJIAEoCRIh",
            "Chl0YXNrX3dvcmtpbmdfdGltZV9kaXNwbGF5GAogASgJKkkKElVJWWFkZWxS",
            "ZXF1ZXN0VHlwZRIPCgtSRVBPUlRfREFHUxAAEg4KCkRFTEVURV9EQUcQARIS",
            "Cg5HRVRfREFHX1NUQVRVUxACKjoKDVVJV29ya2VyU3RhdGUSFQoRQ1VSUkVO",
            "VExZX1dPUktJTkcQABISCg5DVVJSRU5UTFlfSURMRRABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Org.Roylance.Yadel.UIYadelRequestType), typeof(global::Org.Roylance.Yadel.UIWorkerState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.UIYadelRequest), global::Org.Roylance.Yadel.UIYadelRequest.Parser, new[]{ "RequestType", "DagId", "Token", "UserName", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.UIYadelResponse), global::Org.Roylance.Yadel.UIYadelResponse.Parser, new[]{ "Content", "Report", "Dag", "Configurations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.UIDagReport), global::Org.Roylance.Yadel.UIDagReport.Parser, new[]{ "Workers", "Dags", "UsedManagerMemory", "TotalManagerMemory", "ActiveDags", "UnprocessedDags", "SavedDags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.UIDag), global::Org.Roylance.Yadel.UIDag.Parser, new[]{ "Id", "Display", "Nodes", "Edges", "IsCompleted", "IsProcessing", "IsError", "Logs", "NumberCompleted", "NumberProcessing", "NumberErrored", "NumberUnprocessed", "Children" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.UIEdge), global::Org.Roylance.Yadel.UIEdge.Parser, new[]{ "NodeId1", "NodeId2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.UINode), global::Org.Roylance.Yadel.UINode.Parser, new[]{ "Id", "Display", "ExecutionDate", "StartDate", "EndDate", "Duration", "IsCompleted", "IsProcessing", "IsError", "Logs", "IsWaitingForAnotherDagTask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.UILog), global::Org.Roylance.Yadel.UILog.Parser, new[]{ "Id", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.UIWorkerConfiguration), global::Org.Roylance.Yadel.UIWorkerConfiguration.Parser, new[]{ "Ip", "Port", "Host", "InitializedTime", "State", "TaskDisplay", "DagDisplay", "MinutesBeforeTaskReset", "TaskStartTime", "TaskWorkingTimeDisplay" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum UIYadelRequestType {
    [pbr::OriginalName("REPORT_DAGS")] ReportDags = 0,
    [pbr::OriginalName("DELETE_DAG")] DeleteDag = 1,
    [pbr::OriginalName("GET_DAG_STATUS")] GetDagStatus = 2,
  }

  public enum UIWorkerState {
    [pbr::OriginalName("CURRENTLY_WORKING")] CurrentlyWorking = 0,
    [pbr::OriginalName("CURRENTLY_IDLE")] CurrentlyIdle = 1,
  }

  #endregion

  #region Messages
  public sealed partial class UIYadelRequest : pb::IMessage<UIYadelRequest> {
    private static readonly pb::MessageParser<UIYadelRequest> _parser = new pb::MessageParser<UIYadelRequest>(() => new UIYadelRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIYadelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelReportReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYadelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYadelRequest(UIYadelRequest other) : this() {
      requestType_ = other.requestType_;
      dagId_ = other.dagId_;
      token_ = other.token_;
      userName_ = other.userName_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYadelRequest Clone() {
      return new UIYadelRequest(this);
    }

    /// <summary>Field number for the "request_type" field.</summary>
    public const int RequestTypeFieldNumber = 1;
    private global::Org.Roylance.Yadel.UIYadelRequestType requestType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yadel.UIYadelRequestType RequestType {
      get { return requestType_; }
      set {
        requestType_ = value;
      }
    }

    /// <summary>Field number for the "dag_id" field.</summary>
    public const int DagIdFieldNumber = 2;
    private string dagId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DagId {
      get { return dagId_; }
      set {
        dagId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 4;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 5;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIYadelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIYadelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestType != other.RequestType) return false;
      if (DagId != other.DagId) return false;
      if (Token != other.Token) return false;
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestType != 0) hash ^= RequestType.GetHashCode();
      if (DagId.Length != 0) hash ^= DagId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestType);
      }
      if (DagId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DagId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestType);
      }
      if (DagId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DagId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIYadelRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestType != 0) {
        RequestType = other.RequestType;
      }
      if (other.DagId.Length != 0) {
        DagId = other.DagId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            requestType_ = (global::Org.Roylance.Yadel.UIYadelRequestType) input.ReadEnum();
            break;
          }
          case 18: {
            DagId = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            UserName = input.ReadString();
            break;
          }
          case 42: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIYadelResponse : pb::IMessage<UIYadelResponse> {
    private static readonly pb::MessageParser<UIYadelResponse> _parser = new pb::MessageParser<UIYadelResponse>(() => new UIYadelResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIYadelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelReportReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYadelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYadelResponse(UIYadelResponse other) : this() {
      content_ = other.content_;
      Report = other.report_ != null ? other.Report.Clone() : null;
      Dag = other.dag_ != null ? other.Dag.Clone() : null;
      configurations_ = other.configurations_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIYadelResponse Clone() {
      return new UIYadelResponse(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "report" field.</summary>
    public const int ReportFieldNumber = 2;
    private global::Org.Roylance.Yadel.UIDagReport report_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yadel.UIDagReport Report {
      get { return report_; }
      set {
        report_ = value;
      }
    }

    /// <summary>Field number for the "dag" field.</summary>
    public const int DagFieldNumber = 3;
    private global::Org.Roylance.Yadel.UIDag dag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yadel.UIDag Dag {
      get { return dag_; }
      set {
        dag_ = value;
      }
    }

    /// <summary>Field number for the "configurations" field.</summary>
    public const int ConfigurationsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.UIWorkerConfiguration> _repeated_configurations_codec
        = pb::FieldCodec.ForMessage(34, global::Org.Roylance.Yadel.UIWorkerConfiguration.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.UIWorkerConfiguration> configurations_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.UIWorkerConfiguration>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.UIWorkerConfiguration> Configurations {
      get { return configurations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIYadelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIYadelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (!object.Equals(Report, other.Report)) return false;
      if (!object.Equals(Dag, other.Dag)) return false;
      if(!configurations_.Equals(other.configurations_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (report_ != null) hash ^= Report.GetHashCode();
      if (dag_ != null) hash ^= Dag.GetHashCode();
      hash ^= configurations_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (report_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Report);
      }
      if (dag_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Dag);
      }
      configurations_.WriteTo(output, _repeated_configurations_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (report_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Report);
      }
      if (dag_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dag);
      }
      size += configurations_.CalculateSize(_repeated_configurations_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIYadelResponse other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.report_ != null) {
        if (report_ == null) {
          report_ = new global::Org.Roylance.Yadel.UIDagReport();
        }
        Report.MergeFrom(other.Report);
      }
      if (other.dag_ != null) {
        if (dag_ == null) {
          dag_ = new global::Org.Roylance.Yadel.UIDag();
        }
        Dag.MergeFrom(other.Dag);
      }
      configurations_.Add(other.configurations_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 18: {
            if (report_ == null) {
              report_ = new global::Org.Roylance.Yadel.UIDagReport();
            }
            input.ReadMessage(report_);
            break;
          }
          case 26: {
            if (dag_ == null) {
              dag_ = new global::Org.Roylance.Yadel.UIDag();
            }
            input.ReadMessage(dag_);
            break;
          }
          case 34: {
            configurations_.AddEntriesFrom(input, _repeated_configurations_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIDagReport : pb::IMessage<UIDagReport> {
    private static readonly pb::MessageParser<UIDagReport> _parser = new pb::MessageParser<UIDagReport>(() => new UIDagReport());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIDagReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelReportReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIDagReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIDagReport(UIDagReport other) : this() {
      workers_ = other.workers_.Clone();
      dags_ = other.dags_.Clone();
      usedManagerMemory_ = other.usedManagerMemory_;
      totalManagerMemory_ = other.totalManagerMemory_;
      activeDags_ = other.activeDags_;
      unprocessedDags_ = other.unprocessedDags_;
      savedDags_ = other.savedDags_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIDagReport Clone() {
      return new UIDagReport(this);
    }

    /// <summary>Field number for the "workers" field.</summary>
    public const int WorkersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.UIWorkerConfiguration> _repeated_workers_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Roylance.Yadel.UIWorkerConfiguration.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.UIWorkerConfiguration> workers_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.UIWorkerConfiguration>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.UIWorkerConfiguration> Workers {
      get { return workers_; }
    }

    /// <summary>Field number for the "dags" field.</summary>
    public const int DagsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.UIDag> _repeated_dags_codec
        = pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yadel.UIDag.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.UIDag> dags_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.UIDag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.UIDag> Dags {
      get { return dags_; }
    }

    /// <summary>Field number for the "used_manager_memory" field.</summary>
    public const int UsedManagerMemoryFieldNumber = 3;
    private string usedManagerMemory_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UsedManagerMemory {
      get { return usedManagerMemory_; }
      set {
        usedManagerMemory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_manager_memory" field.</summary>
    public const int TotalManagerMemoryFieldNumber = 4;
    private string totalManagerMemory_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TotalManagerMemory {
      get { return totalManagerMemory_; }
      set {
        totalManagerMemory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "active_dags" field.</summary>
    public const int ActiveDagsFieldNumber = 5;
    private int activeDags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveDags {
      get { return activeDags_; }
      set {
        activeDags_ = value;
      }
    }

    /// <summary>Field number for the "unprocessed_dags" field.</summary>
    public const int UnprocessedDagsFieldNumber = 6;
    private int unprocessedDags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnprocessedDags {
      get { return unprocessedDags_; }
      set {
        unprocessedDags_ = value;
      }
    }

    /// <summary>Field number for the "saved_dags" field.</summary>
    public const int SavedDagsFieldNumber = 7;
    private int savedDags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SavedDags {
      get { return savedDags_; }
      set {
        savedDags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIDagReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIDagReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!workers_.Equals(other.workers_)) return false;
      if(!dags_.Equals(other.dags_)) return false;
      if (UsedManagerMemory != other.UsedManagerMemory) return false;
      if (TotalManagerMemory != other.TotalManagerMemory) return false;
      if (ActiveDags != other.ActiveDags) return false;
      if (UnprocessedDags != other.UnprocessedDags) return false;
      if (SavedDags != other.SavedDags) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= workers_.GetHashCode();
      hash ^= dags_.GetHashCode();
      if (UsedManagerMemory.Length != 0) hash ^= UsedManagerMemory.GetHashCode();
      if (TotalManagerMemory.Length != 0) hash ^= TotalManagerMemory.GetHashCode();
      if (ActiveDags != 0) hash ^= ActiveDags.GetHashCode();
      if (UnprocessedDags != 0) hash ^= UnprocessedDags.GetHashCode();
      if (SavedDags != 0) hash ^= SavedDags.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      workers_.WriteTo(output, _repeated_workers_codec);
      dags_.WriteTo(output, _repeated_dags_codec);
      if (UsedManagerMemory.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UsedManagerMemory);
      }
      if (TotalManagerMemory.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TotalManagerMemory);
      }
      if (ActiveDags != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ActiveDags);
      }
      if (UnprocessedDags != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnprocessedDags);
      }
      if (SavedDags != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SavedDags);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += workers_.CalculateSize(_repeated_workers_codec);
      size += dags_.CalculateSize(_repeated_dags_codec);
      if (UsedManagerMemory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UsedManagerMemory);
      }
      if (TotalManagerMemory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TotalManagerMemory);
      }
      if (ActiveDags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveDags);
      }
      if (UnprocessedDags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnprocessedDags);
      }
      if (SavedDags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SavedDags);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIDagReport other) {
      if (other == null) {
        return;
      }
      workers_.Add(other.workers_);
      dags_.Add(other.dags_);
      if (other.UsedManagerMemory.Length != 0) {
        UsedManagerMemory = other.UsedManagerMemory;
      }
      if (other.TotalManagerMemory.Length != 0) {
        TotalManagerMemory = other.TotalManagerMemory;
      }
      if (other.ActiveDags != 0) {
        ActiveDags = other.ActiveDags;
      }
      if (other.UnprocessedDags != 0) {
        UnprocessedDags = other.UnprocessedDags;
      }
      if (other.SavedDags != 0) {
        SavedDags = other.SavedDags;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            workers_.AddEntriesFrom(input, _repeated_workers_codec);
            break;
          }
          case 18: {
            dags_.AddEntriesFrom(input, _repeated_dags_codec);
            break;
          }
          case 26: {
            UsedManagerMemory = input.ReadString();
            break;
          }
          case 34: {
            TotalManagerMemory = input.ReadString();
            break;
          }
          case 40: {
            ActiveDags = input.ReadInt32();
            break;
          }
          case 48: {
            UnprocessedDags = input.ReadInt32();
            break;
          }
          case 56: {
            SavedDags = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIDag : pb::IMessage<UIDag> {
    private static readonly pb::MessageParser<UIDag> _parser = new pb::MessageParser<UIDag>(() => new UIDag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIDag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelReportReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIDag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIDag(UIDag other) : this() {
      id_ = other.id_;
      display_ = other.display_;
      nodes_ = other.nodes_.Clone();
      edges_ = other.edges_.Clone();
      isCompleted_ = other.isCompleted_;
      isProcessing_ = other.isProcessing_;
      isError_ = other.isError_;
      logs_ = other.logs_.Clone();
      numberCompleted_ = other.numberCompleted_;
      numberProcessing_ = other.numberProcessing_;
      numberErrored_ = other.numberErrored_;
      numberUnprocessed_ = other.numberUnprocessed_;
      children_ = other.children_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIDag Clone() {
      return new UIDag(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private string display_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Display {
      get { return display_; }
      set {
        display_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.UINode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(26, global::Org.Roylance.Yadel.UINode.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.UINode> nodes_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.UINode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.UINode> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "edges" field.</summary>
    public const int EdgesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.UIEdge> _repeated_edges_codec
        = pb::FieldCodec.ForMessage(34, global::Org.Roylance.Yadel.UIEdge.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.UIEdge> edges_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.UIEdge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.UIEdge> Edges {
      get { return edges_; }
    }

    /// <summary>Field number for the "is_completed" field.</summary>
    public const int IsCompletedFieldNumber = 5;
    private bool isCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCompleted {
      get { return isCompleted_; }
      set {
        isCompleted_ = value;
      }
    }

    /// <summary>Field number for the "is_processing" field.</summary>
    public const int IsProcessingFieldNumber = 6;
    private bool isProcessing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsProcessing {
      get { return isProcessing_; }
      set {
        isProcessing_ = value;
      }
    }

    /// <summary>Field number for the "is_error" field.</summary>
    public const int IsErrorFieldNumber = 7;
    private bool isError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_logs_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> logs_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "number_completed" field.</summary>
    public const int NumberCompletedFieldNumber = 9;
    private int numberCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberCompleted {
      get { return numberCompleted_; }
      set {
        numberCompleted_ = value;
      }
    }

    /// <summary>Field number for the "number_processing" field.</summary>
    public const int NumberProcessingFieldNumber = 10;
    private int numberProcessing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberProcessing {
      get { return numberProcessing_; }
      set {
        numberProcessing_ = value;
      }
    }

    /// <summary>Field number for the "number_errored" field.</summary>
    public const int NumberErroredFieldNumber = 11;
    private int numberErrored_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberErrored {
      get { return numberErrored_; }
      set {
        numberErrored_ = value;
      }
    }

    /// <summary>Field number for the "number_unprocessed" field.</summary>
    public const int NumberUnprocessedFieldNumber = 12;
    private int numberUnprocessed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberUnprocessed {
      get { return numberUnprocessed_; }
      set {
        numberUnprocessed_ = value;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.UIDag> _repeated_children_codec
        = pb::FieldCodec.ForMessage(106, global::Org.Roylance.Yadel.UIDag.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.UIDag> children_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.UIDag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.UIDag> Children {
      get { return children_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIDag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIDag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Display != other.Display) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      if(!edges_.Equals(other.edges_)) return false;
      if (IsCompleted != other.IsCompleted) return false;
      if (IsProcessing != other.IsProcessing) return false;
      if (IsError != other.IsError) return false;
      if(!logs_.Equals(other.logs_)) return false;
      if (NumberCompleted != other.NumberCompleted) return false;
      if (NumberProcessing != other.NumberProcessing) return false;
      if (NumberErrored != other.NumberErrored) return false;
      if (NumberUnprocessed != other.NumberUnprocessed) return false;
      if(!children_.Equals(other.children_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Display.Length != 0) hash ^= Display.GetHashCode();
      hash ^= nodes_.GetHashCode();
      hash ^= edges_.GetHashCode();
      if (IsCompleted != false) hash ^= IsCompleted.GetHashCode();
      if (IsProcessing != false) hash ^= IsProcessing.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      hash ^= logs_.GetHashCode();
      if (NumberCompleted != 0) hash ^= NumberCompleted.GetHashCode();
      if (NumberProcessing != 0) hash ^= NumberProcessing.GetHashCode();
      if (NumberErrored != 0) hash ^= NumberErrored.GetHashCode();
      if (NumberUnprocessed != 0) hash ^= NumberUnprocessed.GetHashCode();
      hash ^= children_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Display.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Display);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
      edges_.WriteTo(output, _repeated_edges_codec);
      if (IsCompleted != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsCompleted);
      }
      if (IsProcessing != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsProcessing);
      }
      if (IsError != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsError);
      }
      logs_.WriteTo(output, _repeated_logs_codec);
      if (NumberCompleted != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NumberCompleted);
      }
      if (NumberProcessing != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NumberProcessing);
      }
      if (NumberErrored != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(NumberErrored);
      }
      if (NumberUnprocessed != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NumberUnprocessed);
      }
      children_.WriteTo(output, _repeated_children_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Display.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Display);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      size += edges_.CalculateSize(_repeated_edges_codec);
      if (IsCompleted != false) {
        size += 1 + 1;
      }
      if (IsProcessing != false) {
        size += 1 + 1;
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (NumberCompleted != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberCompleted);
      }
      if (NumberProcessing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberProcessing);
      }
      if (NumberErrored != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberErrored);
      }
      if (NumberUnprocessed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberUnprocessed);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIDag other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Display.Length != 0) {
        Display = other.Display;
      }
      nodes_.Add(other.nodes_);
      edges_.Add(other.edges_);
      if (other.IsCompleted != false) {
        IsCompleted = other.IsCompleted;
      }
      if (other.IsProcessing != false) {
        IsProcessing = other.IsProcessing;
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
      logs_.Add(other.logs_);
      if (other.NumberCompleted != 0) {
        NumberCompleted = other.NumberCompleted;
      }
      if (other.NumberProcessing != 0) {
        NumberProcessing = other.NumberProcessing;
      }
      if (other.NumberErrored != 0) {
        NumberErrored = other.NumberErrored;
      }
      if (other.NumberUnprocessed != 0) {
        NumberUnprocessed = other.NumberUnprocessed;
      }
      children_.Add(other.children_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Display = input.ReadString();
            break;
          }
          case 26: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 34: {
            edges_.AddEntriesFrom(input, _repeated_edges_codec);
            break;
          }
          case 40: {
            IsCompleted = input.ReadBool();
            break;
          }
          case 48: {
            IsProcessing = input.ReadBool();
            break;
          }
          case 56: {
            IsError = input.ReadBool();
            break;
          }
          case 66: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 72: {
            NumberCompleted = input.ReadInt32();
            break;
          }
          case 80: {
            NumberProcessing = input.ReadInt32();
            break;
          }
          case 88: {
            NumberErrored = input.ReadInt32();
            break;
          }
          case 96: {
            NumberUnprocessed = input.ReadInt32();
            break;
          }
          case 106: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIEdge : pb::IMessage<UIEdge> {
    private static readonly pb::MessageParser<UIEdge> _parser = new pb::MessageParser<UIEdge>(() => new UIEdge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIEdge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelReportReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIEdge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIEdge(UIEdge other) : this() {
      nodeId1_ = other.nodeId1_;
      nodeId2_ = other.nodeId2_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIEdge Clone() {
      return new UIEdge(this);
    }

    /// <summary>Field number for the "node_id_1" field.</summary>
    public const int NodeId1FieldNumber = 1;
    private string nodeId1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId1 {
      get { return nodeId1_; }
      set {
        nodeId1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_id_2" field.</summary>
    public const int NodeId2FieldNumber = 2;
    private string nodeId2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId2 {
      get { return nodeId2_; }
      set {
        nodeId2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIEdge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIEdge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId1 != other.NodeId1) return false;
      if (NodeId2 != other.NodeId2) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId1.Length != 0) hash ^= NodeId1.GetHashCode();
      if (NodeId2.Length != 0) hash ^= NodeId2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId1);
      }
      if (NodeId2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NodeId2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId1);
      }
      if (NodeId2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIEdge other) {
      if (other == null) {
        return;
      }
      if (other.NodeId1.Length != 0) {
        NodeId1 = other.NodeId1;
      }
      if (other.NodeId2.Length != 0) {
        NodeId2 = other.NodeId2;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NodeId1 = input.ReadString();
            break;
          }
          case 18: {
            NodeId2 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UINode : pb::IMessage<UINode> {
    private static readonly pb::MessageParser<UINode> _parser = new pb::MessageParser<UINode>(() => new UINode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UINode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelReportReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UINode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UINode(UINode other) : this() {
      id_ = other.id_;
      display_ = other.display_;
      executionDate_ = other.executionDate_;
      startDate_ = other.startDate_;
      endDate_ = other.endDate_;
      duration_ = other.duration_;
      isCompleted_ = other.isCompleted_;
      isProcessing_ = other.isProcessing_;
      isError_ = other.isError_;
      logs_ = other.logs_.Clone();
      isWaitingForAnotherDagTask_ = other.isWaitingForAnotherDagTask_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UINode Clone() {
      return new UINode(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private string display_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Display {
      get { return display_; }
      set {
        display_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "execution_date" field.</summary>
    public const int ExecutionDateFieldNumber = 4;
    private long executionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecutionDate {
      get { return executionDate_; }
      set {
        executionDate_ = value;
      }
    }

    /// <summary>Field number for the "start_date" field.</summary>
    public const int StartDateFieldNumber = 5;
    private long startDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "end_date" field.</summary>
    public const int EndDateFieldNumber = 6;
    private long endDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndDate {
      get { return endDate_; }
      set {
        endDate_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 7;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "is_completed" field.</summary>
    public const int IsCompletedFieldNumber = 8;
    private bool isCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCompleted {
      get { return isCompleted_; }
      set {
        isCompleted_ = value;
      }
    }

    /// <summary>Field number for the "is_processing" field.</summary>
    public const int IsProcessingFieldNumber = 9;
    private bool isProcessing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsProcessing {
      get { return isProcessing_; }
      set {
        isProcessing_ = value;
      }
    }

    /// <summary>Field number for the "is_error" field.</summary>
    public const int IsErrorFieldNumber = 10;
    private bool isError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.UILog> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(90, global::Org.Roylance.Yadel.UILog.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.UILog> logs_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.UILog>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.UILog> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "is_waiting_for_another_dag_task" field.</summary>
    public const int IsWaitingForAnotherDagTaskFieldNumber = 12;
    private bool isWaitingForAnotherDagTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWaitingForAnotherDagTask {
      get { return isWaitingForAnotherDagTask_; }
      set {
        isWaitingForAnotherDagTask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UINode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UINode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Display != other.Display) return false;
      if (ExecutionDate != other.ExecutionDate) return false;
      if (StartDate != other.StartDate) return false;
      if (EndDate != other.EndDate) return false;
      if (Duration != other.Duration) return false;
      if (IsCompleted != other.IsCompleted) return false;
      if (IsProcessing != other.IsProcessing) return false;
      if (IsError != other.IsError) return false;
      if(!logs_.Equals(other.logs_)) return false;
      if (IsWaitingForAnotherDagTask != other.IsWaitingForAnotherDagTask) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Display.Length != 0) hash ^= Display.GetHashCode();
      if (ExecutionDate != 0L) hash ^= ExecutionDate.GetHashCode();
      if (StartDate != 0L) hash ^= StartDate.GetHashCode();
      if (EndDate != 0L) hash ^= EndDate.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (IsCompleted != false) hash ^= IsCompleted.GetHashCode();
      if (IsProcessing != false) hash ^= IsProcessing.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      hash ^= logs_.GetHashCode();
      if (IsWaitingForAnotherDagTask != false) hash ^= IsWaitingForAnotherDagTask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Display.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Display);
      }
      if (ExecutionDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExecutionDate);
      }
      if (StartDate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartDate);
      }
      if (EndDate != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EndDate);
      }
      if (Duration != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Duration);
      }
      if (IsCompleted != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsCompleted);
      }
      if (IsProcessing != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsProcessing);
      }
      if (IsError != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsError);
      }
      logs_.WriteTo(output, _repeated_logs_codec);
      if (IsWaitingForAnotherDagTask != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsWaitingForAnotherDagTask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Display.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Display);
      }
      if (ExecutionDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionDate);
      }
      if (StartDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartDate);
      }
      if (EndDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndDate);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (IsCompleted != false) {
        size += 1 + 1;
      }
      if (IsProcessing != false) {
        size += 1 + 1;
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (IsWaitingForAnotherDagTask != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UINode other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Display.Length != 0) {
        Display = other.Display;
      }
      if (other.ExecutionDate != 0L) {
        ExecutionDate = other.ExecutionDate;
      }
      if (other.StartDate != 0L) {
        StartDate = other.StartDate;
      }
      if (other.EndDate != 0L) {
        EndDate = other.EndDate;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      if (other.IsCompleted != false) {
        IsCompleted = other.IsCompleted;
      }
      if (other.IsProcessing != false) {
        IsProcessing = other.IsProcessing;
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
      logs_.Add(other.logs_);
      if (other.IsWaitingForAnotherDagTask != false) {
        IsWaitingForAnotherDagTask = other.IsWaitingForAnotherDagTask;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Display = input.ReadString();
            break;
          }
          case 32: {
            ExecutionDate = input.ReadInt64();
            break;
          }
          case 40: {
            StartDate = input.ReadInt64();
            break;
          }
          case 48: {
            EndDate = input.ReadInt64();
            break;
          }
          case 56: {
            Duration = input.ReadInt64();
            break;
          }
          case 64: {
            IsCompleted = input.ReadBool();
            break;
          }
          case 72: {
            IsProcessing = input.ReadBool();
            break;
          }
          case 80: {
            IsError = input.ReadBool();
            break;
          }
          case 90: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 96: {
            IsWaitingForAnotherDagTask = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UILog : pb::IMessage<UILog> {
    private static readonly pb::MessageParser<UILog> _parser = new pb::MessageParser<UILog>(() => new UILog());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UILog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelReportReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UILog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UILog(UILog other) : this() {
      id_ = other.id_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UILog Clone() {
      return new UILog(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UILog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UILog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UILog other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UIWorkerConfiguration : pb::IMessage<UIWorkerConfiguration> {
    private static readonly pb::MessageParser<UIWorkerConfiguration> _parser = new pb::MessageParser<UIWorkerConfiguration>(() => new UIWorkerConfiguration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UIWorkerConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelReportReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIWorkerConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIWorkerConfiguration(UIWorkerConfiguration other) : this() {
      ip_ = other.ip_;
      port_ = other.port_;
      host_ = other.host_;
      initializedTime_ = other.initializedTime_;
      state_ = other.state_;
      taskDisplay_ = other.taskDisplay_;
      dagDisplay_ = other.dagDisplay_;
      minutesBeforeTaskReset_ = other.minutesBeforeTaskReset_;
      taskStartTime_ = other.taskStartTime_;
      taskWorkingTimeDisplay_ = other.taskWorkingTimeDisplay_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UIWorkerConfiguration Clone() {
      return new UIWorkerConfiguration(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private string port_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Port {
      get { return port_; }
      set {
        port_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 3;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "initialized_time" field.</summary>
    public const int InitializedTimeFieldNumber = 4;
    private string initializedTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InitializedTime {
      get { return initializedTime_; }
      set {
        initializedTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private global::Org.Roylance.Yadel.UIWorkerState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yadel.UIWorkerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "task_display" field.</summary>
    public const int TaskDisplayFieldNumber = 6;
    private string taskDisplay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskDisplay {
      get { return taskDisplay_; }
      set {
        taskDisplay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dag_display" field.</summary>
    public const int DagDisplayFieldNumber = 7;
    private string dagDisplay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DagDisplay {
      get { return dagDisplay_; }
      set {
        dagDisplay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minutes_before_task_reset" field.</summary>
    public const int MinutesBeforeTaskResetFieldNumber = 8;
    private ulong minutesBeforeTaskReset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MinutesBeforeTaskReset {
      get { return minutesBeforeTaskReset_; }
      set {
        minutesBeforeTaskReset_ = value;
      }
    }

    /// <summary>Field number for the "task_start_time" field.</summary>
    public const int TaskStartTimeFieldNumber = 9;
    private string taskStartTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskStartTime {
      get { return taskStartTime_; }
      set {
        taskStartTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "task_working_time_display" field.</summary>
    public const int TaskWorkingTimeDisplayFieldNumber = 10;
    private string taskWorkingTimeDisplay_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskWorkingTimeDisplay {
      get { return taskWorkingTimeDisplay_; }
      set {
        taskWorkingTimeDisplay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UIWorkerConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UIWorkerConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Host != other.Host) return false;
      if (InitializedTime != other.InitializedTime) return false;
      if (State != other.State) return false;
      if (TaskDisplay != other.TaskDisplay) return false;
      if (DagDisplay != other.DagDisplay) return false;
      if (MinutesBeforeTaskReset != other.MinutesBeforeTaskReset) return false;
      if (TaskStartTime != other.TaskStartTime) return false;
      if (TaskWorkingTimeDisplay != other.TaskWorkingTimeDisplay) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port.Length != 0) hash ^= Port.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (InitializedTime.Length != 0) hash ^= InitializedTime.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (TaskDisplay.Length != 0) hash ^= TaskDisplay.GetHashCode();
      if (DagDisplay.Length != 0) hash ^= DagDisplay.GetHashCode();
      if (MinutesBeforeTaskReset != 0UL) hash ^= MinutesBeforeTaskReset.GetHashCode();
      if (TaskStartTime.Length != 0) hash ^= TaskStartTime.GetHashCode();
      if (TaskWorkingTimeDisplay.Length != 0) hash ^= TaskWorkingTimeDisplay.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Port.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Port);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Host);
      }
      if (InitializedTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InitializedTime);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) State);
      }
      if (TaskDisplay.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TaskDisplay);
      }
      if (DagDisplay.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DagDisplay);
      }
      if (MinutesBeforeTaskReset != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(MinutesBeforeTaskReset);
      }
      if (TaskStartTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TaskStartTime);
      }
      if (TaskWorkingTimeDisplay.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TaskWorkingTimeDisplay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Port);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (InitializedTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InitializedTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (TaskDisplay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskDisplay);
      }
      if (DagDisplay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DagDisplay);
      }
      if (MinutesBeforeTaskReset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinutesBeforeTaskReset);
      }
      if (TaskStartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskStartTime);
      }
      if (TaskWorkingTimeDisplay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskWorkingTimeDisplay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UIWorkerConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port.Length != 0) {
        Port = other.Port;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.InitializedTime.Length != 0) {
        InitializedTime = other.InitializedTime;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.TaskDisplay.Length != 0) {
        TaskDisplay = other.TaskDisplay;
      }
      if (other.DagDisplay.Length != 0) {
        DagDisplay = other.DagDisplay;
      }
      if (other.MinutesBeforeTaskReset != 0UL) {
        MinutesBeforeTaskReset = other.MinutesBeforeTaskReset;
      }
      if (other.TaskStartTime.Length != 0) {
        TaskStartTime = other.TaskStartTime;
      }
      if (other.TaskWorkingTimeDisplay.Length != 0) {
        TaskWorkingTimeDisplay = other.TaskWorkingTimeDisplay;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 18: {
            Port = input.ReadString();
            break;
          }
          case 26: {
            Host = input.ReadString();
            break;
          }
          case 34: {
            InitializedTime = input.ReadString();
            break;
          }
          case 40: {
            state_ = (global::Org.Roylance.Yadel.UIWorkerState) input.ReadEnum();
            break;
          }
          case 50: {
            TaskDisplay = input.ReadString();
            break;
          }
          case 58: {
            DagDisplay = input.ReadString();
            break;
          }
          case 64: {
            MinutesBeforeTaskReset = input.ReadUInt64();
            break;
          }
          case 74: {
            TaskStartTime = input.ReadString();
            break;
          }
          case 82: {
            TaskWorkingTimeDisplay = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
