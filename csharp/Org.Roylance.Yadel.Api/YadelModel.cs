// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yadel_model.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Org.Roylance.Yadel {

  /// <summary>Holder for reflection information generated from yadel_model.proto</summary>
  public static partial class YadelModelReflection {

    #region Descriptor
    /// <summary>File descriptor for yadel_model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YadelModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChF5YWRlbF9tb2RlbC5wcm90bxISb3JnLnJveWxhbmNlLnlhZGVsIp0CChNX",
            "b3JrZXJDb25maWd1cmF0aW9uEgoKAmlkGAEgASgJEgoKAmlwGAIgASgJEgwK",
            "BHBvcnQYAyABKAkSDAoEaG9zdBgEIAEoCRIYChBpbml0aWFsaXplZF90aW1l",
            "GAUgASgJEi4KBXN0YXRlGAYgASgOMh8ub3JnLnJveWxhbmNlLnlhZGVsLldv",
            "cmtlclN0YXRlEiYKBHRhc2sYByABKAsyGC5vcmcucm95bGFuY2UueWFkZWwu",
            "VGFzaxIkCgNkYWcYCCABKAsyFy5vcmcucm95bGFuY2UueWFkZWwuRGFnEiEK",
            "GW1pbnV0ZXNfYmVmb3JlX3Rhc2tfcmVzZXQYCSABKAQSFwoPdGFza19zdGFy",
            "dF90aW1lGAogASgJIiIKA0xvZxIKCgJpZBgBIAEoCRIPCgdtZXNzYWdlGAIg",
            "ASgJIpsDCgNEYWcSCgoCaWQYASABKAkSDwoHZGlzcGxheRgCIAEoCRIxCg9m",
            "bGF0dGVuZWRfdGFza3MYAyADKAsyGC5vcmcucm95bGFuY2UueWFkZWwuVGFz",
            "axIWCg5leGVjdXRpb25fZGF0ZRgEIAEoAxISCgpzdGFydF9kYXRlGAUgASgD",
            "EhAKCGVuZF9kYXRlGAYgASgDEhAKCGR1cmF0aW9uGAcgASgDEjMKEXVuY29t",
            "cGxldGVkX3Rhc2tzGAggAygLMhgub3JnLnJveWxhbmNlLnlhZGVsLlRhc2sS",
            "MgoQcHJvY2Vzc2luZ190YXNrcxgJIAMoCzIYLm9yZy5yb3lsYW5jZS55YWRl",
            "bC5UYXNrEi8KDWVycm9yZWRfdGFza3MYCiADKAsyGC5vcmcucm95bGFuY2Uu",
            "eWFkZWwuVGFzaxIxCg9jb21wbGV0ZWRfdGFza3MYCyADKAsyGC5vcmcucm95",
            "bGFuY2UueWFkZWwuVGFzaxInCgZwYXJlbnQYDCABKAsyFy5vcmcucm95bGFu",
            "Y2UueWFkZWwuRGFnIusCCgRUYXNrEgoKAmlkGAEgASgJEg8KB2Rpc3BsYXkY",
            "AiABKAkSOAoMZGVwZW5kZW5jaWVzGAMgAygLMiIub3JnLnJveWxhbmNlLnlh",
            "ZGVsLlRhc2tEZXBlbmRlbmN5Eg4KBmRhZ19pZBgEIAEoCRIlCgRsb2dzGAUg",
            "AygLMhcub3JnLnJveWxhbmNlLnlhZGVsLkxvZxIWCg5leGVjdXRpb25fZGF0",
            "ZRgGIAEoAxISCgpzdGFydF9kYXRlGAcgASgDEhAKCGVuZF9kYXRlGAggASgD",
            "EhAKCGR1cmF0aW9uGAkgASgDEh0KFWZpcnN0X2NvbnRleHRfYmFzZV82NBgK",
            "IAEoCRIeChZzZWNvbmRfY29udGV4dF9iYXNlXzY0GAsgASgJEh0KFXRoaXJk",
            "X2NvbnRleHRfYmFzZV82NBgMIAEoCRInCh9pc193YWl0aW5nX2Zvcl9hbm90",
            "aGVyX2RhZ190YXNrGA0gASgIIjQKDlRhc2tEZXBlbmRlbmN5EgoKAmlkGAEg",
            "ASgJEhYKDnBhcmVudF90YXNrX2lkGAIgASgJItMBCgxBZGRUYXNrVG9EYWcS",
            "CgoCaWQYASABKAkSLQoLcGFyZW50X3Rhc2sYAiABKAsyGC5vcmcucm95bGFu",
            "Y2UueWFkZWwuVGFzaxIqCghuZXdfdGFzaxgDIAEoCzIYLm9yZy5yb3lsYW5j",
            "ZS55YWRlbC5UYXNrEh0KFWZpcnN0X2NvbnRleHRfYmFzZV82NBgEIAEoCRIe",
            "ChZzZWNvbmRfY29udGV4dF9iYXNlXzY0GAUgASgJEh0KFXRoaXJkX2NvbnRl",
            "eHRfYmFzZV82NBgGIAEoCSKbAQoMQ29tcGxldGVUYXNrEgoKAmlkGAEgASgJ",
            "EiYKBHRhc2sYAiABKAsyGC5vcmcucm95bGFuY2UueWFkZWwuVGFzaxJFChR3",
            "b3JrZXJfY29uZmlndXJhdGlvbhgDIAEoCzInLm9yZy5yb3lsYW5jZS55YWRl",
            "bC5Xb3JrZXJDb25maWd1cmF0aW9uEhAKCGlzX2Vycm9yGAUgASgIIqMBCgdB",
            "bGxEYWdzEiUKBGRhZ3MYASADKAsyFy5vcmcucm95bGFuY2UueWFkZWwuRGFn",
            "EjgKB3dvcmtlcnMYAiADKAsyJy5vcmcucm95bGFuY2UueWFkZWwuV29ya2Vy",
            "Q29uZmlndXJhdGlvbhIbChNpbmNsdWRlX3VucHJvY2Vzc2VkGAMgASgIEhoK",
            "EmluY2x1ZGVfZmlsZV9zYXZlZBgEIAEoCCokCgtXb3JrZXJTdGF0ZRILCgdX",
            "T1JLSU5HEAASCAoESURMRRABKi4KGldvcmtlclRvTWFuYWdlck1lc3NhZ2VU",
            "eXBlEhAKDFJFR0lTVFJBVElPThAAKjkKG01hbmFnZXJUb01hbmFnZXJNZXNz",
            "YWdlVHlwZRIaChZFTlNVUkVfV09SS0VSU19XT1JLSU5HEAAqJAoJQWN0b3JS",
            "b2xlEgsKB01BTkFHRVIQABIKCgZXT1JLRVIQAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Org.Roylance.Yadel.WorkerState), typeof(global::Org.Roylance.Yadel.WorkerToManagerMessageType), typeof(global::Org.Roylance.Yadel.ManagerToManagerMessageType), typeof(global::Org.Roylance.Yadel.ActorRole), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.WorkerConfiguration), global::Org.Roylance.Yadel.WorkerConfiguration.Parser, new[]{ "Id", "Ip", "Port", "Host", "InitializedTime", "State", "Task", "Dag", "MinutesBeforeTaskReset", "TaskStartTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.Log), global::Org.Roylance.Yadel.Log.Parser, new[]{ "Id", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.Dag), global::Org.Roylance.Yadel.Dag.Parser, new[]{ "Id", "Display", "FlattenedTasks", "ExecutionDate", "StartDate", "EndDate", "Duration", "UncompletedTasks", "ProcessingTasks", "ErroredTasks", "CompletedTasks", "Parent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.Task), global::Org.Roylance.Yadel.Task.Parser, new[]{ "Id", "Display", "Dependencies", "DagId", "Logs", "ExecutionDate", "StartDate", "EndDate", "Duration", "FirstContextBase64", "SecondContextBase64", "ThirdContextBase64", "IsWaitingForAnotherDagTask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.TaskDependency), global::Org.Roylance.Yadel.TaskDependency.Parser, new[]{ "Id", "ParentTaskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.AddTaskToDag), global::Org.Roylance.Yadel.AddTaskToDag.Parser, new[]{ "Id", "ParentTask", "NewTask", "FirstContextBase64", "SecondContextBase64", "ThirdContextBase64" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.CompleteTask), global::Org.Roylance.Yadel.CompleteTask.Parser, new[]{ "Id", "Task", "WorkerConfiguration", "IsError" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Org.Roylance.Yadel.AllDags), global::Org.Roylance.Yadel.AllDags.Parser, new[]{ "Dags", "Workers", "IncludeUnprocessed", "IncludeFileSaved" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum WorkerState {
    [pbr::OriginalName("WORKING")] Working = 0,
    [pbr::OriginalName("IDLE")] Idle = 1,
  }

  public enum WorkerToManagerMessageType {
    [pbr::OriginalName("REGISTRATION")] Registration = 0,
  }

  public enum ManagerToManagerMessageType {
    [pbr::OriginalName("ENSURE_WORKERS_WORKING")] EnsureWorkersWorking = 0,
  }

  public enum ActorRole {
    [pbr::OriginalName("MANAGER")] Manager = 0,
    [pbr::OriginalName("WORKER")] Worker = 1,
  }

  #endregion

  #region Messages
  public sealed partial class WorkerConfiguration : pb::IMessage<WorkerConfiguration> {
    private static readonly pb::MessageParser<WorkerConfiguration> _parser = new pb::MessageParser<WorkerConfiguration>(() => new WorkerConfiguration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkerConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerConfiguration(WorkerConfiguration other) : this() {
      id_ = other.id_;
      ip_ = other.ip_;
      port_ = other.port_;
      host_ = other.host_;
      initializedTime_ = other.initializedTime_;
      state_ = other.state_;
      Task = other.task_ != null ? other.Task.Clone() : null;
      Dag = other.dag_ != null ? other.Dag.Clone() : null;
      minutesBeforeTaskReset_ = other.minutesBeforeTaskReset_;
      taskStartTime_ = other.taskStartTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerConfiguration Clone() {
      return new WorkerConfiguration(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private string port_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Port {
      get { return port_; }
      set {
        port_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 4;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "initialized_time" field.</summary>
    public const int InitializedTimeFieldNumber = 5;
    private string initializedTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InitializedTime {
      get { return initializedTime_; }
      set {
        initializedTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private global::Org.Roylance.Yadel.WorkerState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yadel.WorkerState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 7;
    private global::Org.Roylance.Yadel.Task task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yadel.Task Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    /// <summary>Field number for the "dag" field.</summary>
    public const int DagFieldNumber = 8;
    private global::Org.Roylance.Yadel.Dag dag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yadel.Dag Dag {
      get { return dag_; }
      set {
        dag_ = value;
      }
    }

    /// <summary>Field number for the "minutes_before_task_reset" field.</summary>
    public const int MinutesBeforeTaskResetFieldNumber = 9;
    private ulong minutesBeforeTaskReset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MinutesBeforeTaskReset {
      get { return minutesBeforeTaskReset_; }
      set {
        minutesBeforeTaskReset_ = value;
      }
    }

    /// <summary>Field number for the "task_start_time" field.</summary>
    public const int TaskStartTimeFieldNumber = 10;
    private string taskStartTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskStartTime {
      get { return taskStartTime_; }
      set {
        taskStartTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkerConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkerConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Host != other.Host) return false;
      if (InitializedTime != other.InitializedTime) return false;
      if (State != other.State) return false;
      if (!object.Equals(Task, other.Task)) return false;
      if (!object.Equals(Dag, other.Dag)) return false;
      if (MinutesBeforeTaskReset != other.MinutesBeforeTaskReset) return false;
      if (TaskStartTime != other.TaskStartTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port.Length != 0) hash ^= Port.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (InitializedTime.Length != 0) hash ^= InitializedTime.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (task_ != null) hash ^= Task.GetHashCode();
      if (dag_ != null) hash ^= Dag.GetHashCode();
      if (MinutesBeforeTaskReset != 0UL) hash ^= MinutesBeforeTaskReset.GetHashCode();
      if (TaskStartTime.Length != 0) hash ^= TaskStartTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (Port.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Port);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Host);
      }
      if (InitializedTime.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InitializedTime);
      }
      if (State != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) State);
      }
      if (task_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Task);
      }
      if (dag_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Dag);
      }
      if (MinutesBeforeTaskReset != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(MinutesBeforeTaskReset);
      }
      if (TaskStartTime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TaskStartTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Port);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (InitializedTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InitializedTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      if (dag_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dag);
      }
      if (MinutesBeforeTaskReset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinutesBeforeTaskReset);
      }
      if (TaskStartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskStartTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkerConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port.Length != 0) {
        Port = other.Port;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.InitializedTime.Length != 0) {
        InitializedTime = other.InitializedTime;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.task_ != null) {
        if (task_ == null) {
          task_ = new global::Org.Roylance.Yadel.Task();
        }
        Task.MergeFrom(other.Task);
      }
      if (other.dag_ != null) {
        if (dag_ == null) {
          dag_ = new global::Org.Roylance.Yadel.Dag();
        }
        Dag.MergeFrom(other.Dag);
      }
      if (other.MinutesBeforeTaskReset != 0UL) {
        MinutesBeforeTaskReset = other.MinutesBeforeTaskReset;
      }
      if (other.TaskStartTime.Length != 0) {
        TaskStartTime = other.TaskStartTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 26: {
            Port = input.ReadString();
            break;
          }
          case 34: {
            Host = input.ReadString();
            break;
          }
          case 42: {
            InitializedTime = input.ReadString();
            break;
          }
          case 48: {
            state_ = (global::Org.Roylance.Yadel.WorkerState) input.ReadEnum();
            break;
          }
          case 58: {
            if (task_ == null) {
              task_ = new global::Org.Roylance.Yadel.Task();
            }
            input.ReadMessage(task_);
            break;
          }
          case 66: {
            if (dag_ == null) {
              dag_ = new global::Org.Roylance.Yadel.Dag();
            }
            input.ReadMessage(dag_);
            break;
          }
          case 72: {
            MinutesBeforeTaskReset = input.ReadUInt64();
            break;
          }
          case 82: {
            TaskStartTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Log : pb::IMessage<Log> {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      id_ = other.id_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Dag : pb::IMessage<Dag> {
    private static readonly pb::MessageParser<Dag> _parser = new pb::MessageParser<Dag>(() => new Dag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dag(Dag other) : this() {
      id_ = other.id_;
      display_ = other.display_;
      flattenedTasks_ = other.flattenedTasks_.Clone();
      executionDate_ = other.executionDate_;
      startDate_ = other.startDate_;
      endDate_ = other.endDate_;
      duration_ = other.duration_;
      uncompletedTasks_ = other.uncompletedTasks_.Clone();
      processingTasks_ = other.processingTasks_.Clone();
      erroredTasks_ = other.erroredTasks_.Clone();
      completedTasks_ = other.completedTasks_.Clone();
      Parent = other.parent_ != null ? other.Parent.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dag Clone() {
      return new Dag(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private string display_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Display {
      get { return display_; }
      set {
        display_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flattened_tasks" field.</summary>
    public const int FlattenedTasksFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.Task> _repeated_flattenedTasks_codec
        = pb::FieldCodec.ForMessage(26, global::Org.Roylance.Yadel.Task.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.Task> flattenedTasks_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.Task> FlattenedTasks {
      get { return flattenedTasks_; }
    }

    /// <summary>Field number for the "execution_date" field.</summary>
    public const int ExecutionDateFieldNumber = 4;
    private long executionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecutionDate {
      get { return executionDate_; }
      set {
        executionDate_ = value;
      }
    }

    /// <summary>Field number for the "start_date" field.</summary>
    public const int StartDateFieldNumber = 5;
    private long startDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "end_date" field.</summary>
    public const int EndDateFieldNumber = 6;
    private long endDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndDate {
      get { return endDate_; }
      set {
        endDate_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 7;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "uncompleted_tasks" field.</summary>
    public const int UncompletedTasksFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.Task> _repeated_uncompletedTasks_codec
        = pb::FieldCodec.ForMessage(66, global::Org.Roylance.Yadel.Task.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.Task> uncompletedTasks_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.Task> UncompletedTasks {
      get { return uncompletedTasks_; }
    }

    /// <summary>Field number for the "processing_tasks" field.</summary>
    public const int ProcessingTasksFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.Task> _repeated_processingTasks_codec
        = pb::FieldCodec.ForMessage(74, global::Org.Roylance.Yadel.Task.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.Task> processingTasks_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.Task> ProcessingTasks {
      get { return processingTasks_; }
    }

    /// <summary>Field number for the "errored_tasks" field.</summary>
    public const int ErroredTasksFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.Task> _repeated_erroredTasks_codec
        = pb::FieldCodec.ForMessage(82, global::Org.Roylance.Yadel.Task.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.Task> erroredTasks_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.Task> ErroredTasks {
      get { return erroredTasks_; }
    }

    /// <summary>Field number for the "completed_tasks" field.</summary>
    public const int CompletedTasksFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.Task> _repeated_completedTasks_codec
        = pb::FieldCodec.ForMessage(90, global::Org.Roylance.Yadel.Task.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.Task> completedTasks_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.Task> CompletedTasks {
      get { return completedTasks_; }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 12;
    private global::Org.Roylance.Yadel.Dag parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yadel.Dag Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Display != other.Display) return false;
      if(!flattenedTasks_.Equals(other.flattenedTasks_)) return false;
      if (ExecutionDate != other.ExecutionDate) return false;
      if (StartDate != other.StartDate) return false;
      if (EndDate != other.EndDate) return false;
      if (Duration != other.Duration) return false;
      if(!uncompletedTasks_.Equals(other.uncompletedTasks_)) return false;
      if(!processingTasks_.Equals(other.processingTasks_)) return false;
      if(!erroredTasks_.Equals(other.erroredTasks_)) return false;
      if(!completedTasks_.Equals(other.completedTasks_)) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Display.Length != 0) hash ^= Display.GetHashCode();
      hash ^= flattenedTasks_.GetHashCode();
      if (ExecutionDate != 0L) hash ^= ExecutionDate.GetHashCode();
      if (StartDate != 0L) hash ^= StartDate.GetHashCode();
      if (EndDate != 0L) hash ^= EndDate.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      hash ^= uncompletedTasks_.GetHashCode();
      hash ^= processingTasks_.GetHashCode();
      hash ^= erroredTasks_.GetHashCode();
      hash ^= completedTasks_.GetHashCode();
      if (parent_ != null) hash ^= Parent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Display.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Display);
      }
      flattenedTasks_.WriteTo(output, _repeated_flattenedTasks_codec);
      if (ExecutionDate != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExecutionDate);
      }
      if (StartDate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartDate);
      }
      if (EndDate != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EndDate);
      }
      if (Duration != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Duration);
      }
      uncompletedTasks_.WriteTo(output, _repeated_uncompletedTasks_codec);
      processingTasks_.WriteTo(output, _repeated_processingTasks_codec);
      erroredTasks_.WriteTo(output, _repeated_erroredTasks_codec);
      completedTasks_.WriteTo(output, _repeated_completedTasks_codec);
      if (parent_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Parent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Display.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Display);
      }
      size += flattenedTasks_.CalculateSize(_repeated_flattenedTasks_codec);
      if (ExecutionDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionDate);
      }
      if (StartDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartDate);
      }
      if (EndDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndDate);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      size += uncompletedTasks_.CalculateSize(_repeated_uncompletedTasks_codec);
      size += processingTasks_.CalculateSize(_repeated_processingTasks_codec);
      size += erroredTasks_.CalculateSize(_repeated_erroredTasks_codec);
      size += completedTasks_.CalculateSize(_repeated_completedTasks_codec);
      if (parent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dag other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Display.Length != 0) {
        Display = other.Display;
      }
      flattenedTasks_.Add(other.flattenedTasks_);
      if (other.ExecutionDate != 0L) {
        ExecutionDate = other.ExecutionDate;
      }
      if (other.StartDate != 0L) {
        StartDate = other.StartDate;
      }
      if (other.EndDate != 0L) {
        EndDate = other.EndDate;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      uncompletedTasks_.Add(other.uncompletedTasks_);
      processingTasks_.Add(other.processingTasks_);
      erroredTasks_.Add(other.erroredTasks_);
      completedTasks_.Add(other.completedTasks_);
      if (other.parent_ != null) {
        if (parent_ == null) {
          parent_ = new global::Org.Roylance.Yadel.Dag();
        }
        Parent.MergeFrom(other.Parent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Display = input.ReadString();
            break;
          }
          case 26: {
            flattenedTasks_.AddEntriesFrom(input, _repeated_flattenedTasks_codec);
            break;
          }
          case 32: {
            ExecutionDate = input.ReadInt64();
            break;
          }
          case 40: {
            StartDate = input.ReadInt64();
            break;
          }
          case 48: {
            EndDate = input.ReadInt64();
            break;
          }
          case 56: {
            Duration = input.ReadInt64();
            break;
          }
          case 66: {
            uncompletedTasks_.AddEntriesFrom(input, _repeated_uncompletedTasks_codec);
            break;
          }
          case 74: {
            processingTasks_.AddEntriesFrom(input, _repeated_processingTasks_codec);
            break;
          }
          case 82: {
            erroredTasks_.AddEntriesFrom(input, _repeated_erroredTasks_codec);
            break;
          }
          case 90: {
            completedTasks_.AddEntriesFrom(input, _repeated_completedTasks_codec);
            break;
          }
          case 98: {
            if (parent_ == null) {
              parent_ = new global::Org.Roylance.Yadel.Dag();
            }
            input.ReadMessage(parent_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Task : pb::IMessage<Task> {
    private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task(Task other) : this() {
      id_ = other.id_;
      display_ = other.display_;
      dependencies_ = other.dependencies_.Clone();
      dagId_ = other.dagId_;
      logs_ = other.logs_.Clone();
      executionDate_ = other.executionDate_;
      startDate_ = other.startDate_;
      endDate_ = other.endDate_;
      duration_ = other.duration_;
      firstContextBase64_ = other.firstContextBase64_;
      secondContextBase64_ = other.secondContextBase64_;
      thirdContextBase64_ = other.thirdContextBase64_;
      isWaitingForAnotherDagTask_ = other.isWaitingForAnotherDagTask_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task Clone() {
      return new Task(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 2;
    private string display_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Display {
      get { return display_; }
      set {
        display_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dependencies" field.</summary>
    public const int DependenciesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.TaskDependency> _repeated_dependencies_codec
        = pb::FieldCodec.ForMessage(26, global::Org.Roylance.Yadel.TaskDependency.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.TaskDependency> dependencies_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.TaskDependency>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.TaskDependency> Dependencies {
      get { return dependencies_; }
    }

    /// <summary>Field number for the "dag_id" field.</summary>
    public const int DagIdFieldNumber = 4;
    private string dagId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DagId {
      get { return dagId_; }
      set {
        dagId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.Log> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(42, global::Org.Roylance.Yadel.Log.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.Log> logs_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.Log>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.Log> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "execution_date" field.</summary>
    public const int ExecutionDateFieldNumber = 6;
    private long executionDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecutionDate {
      get { return executionDate_; }
      set {
        executionDate_ = value;
      }
    }

    /// <summary>Field number for the "start_date" field.</summary>
    public const int StartDateFieldNumber = 7;
    private long startDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "end_date" field.</summary>
    public const int EndDateFieldNumber = 8;
    private long endDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndDate {
      get { return endDate_; }
      set {
        endDate_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 9;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "first_context_base_64" field.</summary>
    public const int FirstContextBase64FieldNumber = 10;
    private string firstContextBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstContextBase64 {
      get { return firstContextBase64_; }
      set {
        firstContextBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "second_context_base_64" field.</summary>
    public const int SecondContextBase64FieldNumber = 11;
    private string secondContextBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondContextBase64 {
      get { return secondContextBase64_; }
      set {
        secondContextBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "third_context_base_64" field.</summary>
    public const int ThirdContextBase64FieldNumber = 12;
    private string thirdContextBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThirdContextBase64 {
      get { return thirdContextBase64_; }
      set {
        thirdContextBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_waiting_for_another_dag_task" field.</summary>
    public const int IsWaitingForAnotherDagTaskFieldNumber = 13;
    private bool isWaitingForAnotherDagTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWaitingForAnotherDagTask {
      get { return isWaitingForAnotherDagTask_; }
      set {
        isWaitingForAnotherDagTask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Display != other.Display) return false;
      if(!dependencies_.Equals(other.dependencies_)) return false;
      if (DagId != other.DagId) return false;
      if(!logs_.Equals(other.logs_)) return false;
      if (ExecutionDate != other.ExecutionDate) return false;
      if (StartDate != other.StartDate) return false;
      if (EndDate != other.EndDate) return false;
      if (Duration != other.Duration) return false;
      if (FirstContextBase64 != other.FirstContextBase64) return false;
      if (SecondContextBase64 != other.SecondContextBase64) return false;
      if (ThirdContextBase64 != other.ThirdContextBase64) return false;
      if (IsWaitingForAnotherDagTask != other.IsWaitingForAnotherDagTask) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Display.Length != 0) hash ^= Display.GetHashCode();
      hash ^= dependencies_.GetHashCode();
      if (DagId.Length != 0) hash ^= DagId.GetHashCode();
      hash ^= logs_.GetHashCode();
      if (ExecutionDate != 0L) hash ^= ExecutionDate.GetHashCode();
      if (StartDate != 0L) hash ^= StartDate.GetHashCode();
      if (EndDate != 0L) hash ^= EndDate.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (FirstContextBase64.Length != 0) hash ^= FirstContextBase64.GetHashCode();
      if (SecondContextBase64.Length != 0) hash ^= SecondContextBase64.GetHashCode();
      if (ThirdContextBase64.Length != 0) hash ^= ThirdContextBase64.GetHashCode();
      if (IsWaitingForAnotherDagTask != false) hash ^= IsWaitingForAnotherDagTask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Display.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Display);
      }
      dependencies_.WriteTo(output, _repeated_dependencies_codec);
      if (DagId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DagId);
      }
      logs_.WriteTo(output, _repeated_logs_codec);
      if (ExecutionDate != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ExecutionDate);
      }
      if (StartDate != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(StartDate);
      }
      if (EndDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(EndDate);
      }
      if (Duration != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Duration);
      }
      if (FirstContextBase64.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(FirstContextBase64);
      }
      if (SecondContextBase64.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SecondContextBase64);
      }
      if (ThirdContextBase64.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ThirdContextBase64);
      }
      if (IsWaitingForAnotherDagTask != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsWaitingForAnotherDagTask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Display.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Display);
      }
      size += dependencies_.CalculateSize(_repeated_dependencies_codec);
      if (DagId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DagId);
      }
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (ExecutionDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecutionDate);
      }
      if (StartDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartDate);
      }
      if (EndDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndDate);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (FirstContextBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstContextBase64);
      }
      if (SecondContextBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecondContextBase64);
      }
      if (ThirdContextBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThirdContextBase64);
      }
      if (IsWaitingForAnotherDagTask != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Display.Length != 0) {
        Display = other.Display;
      }
      dependencies_.Add(other.dependencies_);
      if (other.DagId.Length != 0) {
        DagId = other.DagId;
      }
      logs_.Add(other.logs_);
      if (other.ExecutionDate != 0L) {
        ExecutionDate = other.ExecutionDate;
      }
      if (other.StartDate != 0L) {
        StartDate = other.StartDate;
      }
      if (other.EndDate != 0L) {
        EndDate = other.EndDate;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      if (other.FirstContextBase64.Length != 0) {
        FirstContextBase64 = other.FirstContextBase64;
      }
      if (other.SecondContextBase64.Length != 0) {
        SecondContextBase64 = other.SecondContextBase64;
      }
      if (other.ThirdContextBase64.Length != 0) {
        ThirdContextBase64 = other.ThirdContextBase64;
      }
      if (other.IsWaitingForAnotherDagTask != false) {
        IsWaitingForAnotherDagTask = other.IsWaitingForAnotherDagTask;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Display = input.ReadString();
            break;
          }
          case 26: {
            dependencies_.AddEntriesFrom(input, _repeated_dependencies_codec);
            break;
          }
          case 34: {
            DagId = input.ReadString();
            break;
          }
          case 42: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 48: {
            ExecutionDate = input.ReadInt64();
            break;
          }
          case 56: {
            StartDate = input.ReadInt64();
            break;
          }
          case 64: {
            EndDate = input.ReadInt64();
            break;
          }
          case 72: {
            Duration = input.ReadInt64();
            break;
          }
          case 82: {
            FirstContextBase64 = input.ReadString();
            break;
          }
          case 90: {
            SecondContextBase64 = input.ReadString();
            break;
          }
          case 98: {
            ThirdContextBase64 = input.ReadString();
            break;
          }
          case 104: {
            IsWaitingForAnotherDagTask = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskDependency : pb::IMessage<TaskDependency> {
    private static readonly pb::MessageParser<TaskDependency> _parser = new pb::MessageParser<TaskDependency>(() => new TaskDependency());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskDependency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDependency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDependency(TaskDependency other) : this() {
      id_ = other.id_;
      parentTaskId_ = other.parentTaskId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskDependency Clone() {
      return new TaskDependency(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_task_id" field.</summary>
    public const int ParentTaskIdFieldNumber = 2;
    private string parentTaskId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentTaskId {
      get { return parentTaskId_; }
      set {
        parentTaskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskDependency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskDependency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ParentTaskId != other.ParentTaskId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ParentTaskId.Length != 0) hash ^= ParentTaskId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ParentTaskId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ParentTaskId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ParentTaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentTaskId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskDependency other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ParentTaskId.Length != 0) {
        ParentTaskId = other.ParentTaskId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ParentTaskId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddTaskToDag : pb::IMessage<AddTaskToDag> {
    private static readonly pb::MessageParser<AddTaskToDag> _parser = new pb::MessageParser<AddTaskToDag>(() => new AddTaskToDag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddTaskToDag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTaskToDag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTaskToDag(AddTaskToDag other) : this() {
      id_ = other.id_;
      ParentTask = other.parentTask_ != null ? other.ParentTask.Clone() : null;
      NewTask = other.newTask_ != null ? other.NewTask.Clone() : null;
      firstContextBase64_ = other.firstContextBase64_;
      secondContextBase64_ = other.secondContextBase64_;
      thirdContextBase64_ = other.thirdContextBase64_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTaskToDag Clone() {
      return new AddTaskToDag(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_task" field.</summary>
    public const int ParentTaskFieldNumber = 2;
    private global::Org.Roylance.Yadel.Task parentTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yadel.Task ParentTask {
      get { return parentTask_; }
      set {
        parentTask_ = value;
      }
    }

    /// <summary>Field number for the "new_task" field.</summary>
    public const int NewTaskFieldNumber = 3;
    private global::Org.Roylance.Yadel.Task newTask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yadel.Task NewTask {
      get { return newTask_; }
      set {
        newTask_ = value;
      }
    }

    /// <summary>Field number for the "first_context_base_64" field.</summary>
    public const int FirstContextBase64FieldNumber = 4;
    private string firstContextBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstContextBase64 {
      get { return firstContextBase64_; }
      set {
        firstContextBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "second_context_base_64" field.</summary>
    public const int SecondContextBase64FieldNumber = 5;
    private string secondContextBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecondContextBase64 {
      get { return secondContextBase64_; }
      set {
        secondContextBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "third_context_base_64" field.</summary>
    public const int ThirdContextBase64FieldNumber = 6;
    private string thirdContextBase64_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThirdContextBase64 {
      get { return thirdContextBase64_; }
      set {
        thirdContextBase64_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddTaskToDag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddTaskToDag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(ParentTask, other.ParentTask)) return false;
      if (!object.Equals(NewTask, other.NewTask)) return false;
      if (FirstContextBase64 != other.FirstContextBase64) return false;
      if (SecondContextBase64 != other.SecondContextBase64) return false;
      if (ThirdContextBase64 != other.ThirdContextBase64) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (parentTask_ != null) hash ^= ParentTask.GetHashCode();
      if (newTask_ != null) hash ^= NewTask.GetHashCode();
      if (FirstContextBase64.Length != 0) hash ^= FirstContextBase64.GetHashCode();
      if (SecondContextBase64.Length != 0) hash ^= SecondContextBase64.GetHashCode();
      if (ThirdContextBase64.Length != 0) hash ^= ThirdContextBase64.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (parentTask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ParentTask);
      }
      if (newTask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NewTask);
      }
      if (FirstContextBase64.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FirstContextBase64);
      }
      if (SecondContextBase64.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SecondContextBase64);
      }
      if (ThirdContextBase64.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ThirdContextBase64);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (parentTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParentTask);
      }
      if (newTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewTask);
      }
      if (FirstContextBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstContextBase64);
      }
      if (SecondContextBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecondContextBase64);
      }
      if (ThirdContextBase64.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ThirdContextBase64);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddTaskToDag other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.parentTask_ != null) {
        if (parentTask_ == null) {
          parentTask_ = new global::Org.Roylance.Yadel.Task();
        }
        ParentTask.MergeFrom(other.ParentTask);
      }
      if (other.newTask_ != null) {
        if (newTask_ == null) {
          newTask_ = new global::Org.Roylance.Yadel.Task();
        }
        NewTask.MergeFrom(other.NewTask);
      }
      if (other.FirstContextBase64.Length != 0) {
        FirstContextBase64 = other.FirstContextBase64;
      }
      if (other.SecondContextBase64.Length != 0) {
        SecondContextBase64 = other.SecondContextBase64;
      }
      if (other.ThirdContextBase64.Length != 0) {
        ThirdContextBase64 = other.ThirdContextBase64;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (parentTask_ == null) {
              parentTask_ = new global::Org.Roylance.Yadel.Task();
            }
            input.ReadMessage(parentTask_);
            break;
          }
          case 26: {
            if (newTask_ == null) {
              newTask_ = new global::Org.Roylance.Yadel.Task();
            }
            input.ReadMessage(newTask_);
            break;
          }
          case 34: {
            FirstContextBase64 = input.ReadString();
            break;
          }
          case 42: {
            SecondContextBase64 = input.ReadString();
            break;
          }
          case 50: {
            ThirdContextBase64 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompleteTask : pb::IMessage<CompleteTask> {
    private static readonly pb::MessageParser<CompleteTask> _parser = new pb::MessageParser<CompleteTask>(() => new CompleteTask());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompleteTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteTask(CompleteTask other) : this() {
      id_ = other.id_;
      Task = other.task_ != null ? other.Task.Clone() : null;
      WorkerConfiguration = other.workerConfiguration_ != null ? other.WorkerConfiguration.Clone() : null;
      isError_ = other.isError_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompleteTask Clone() {
      return new CompleteTask(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 2;
    private global::Org.Roylance.Yadel.Task task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yadel.Task Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    /// <summary>Field number for the "worker_configuration" field.</summary>
    public const int WorkerConfigurationFieldNumber = 3;
    private global::Org.Roylance.Yadel.WorkerConfiguration workerConfiguration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Org.Roylance.Yadel.WorkerConfiguration WorkerConfiguration {
      get { return workerConfiguration_; }
      set {
        workerConfiguration_ = value;
      }
    }

    /// <summary>Field number for the "is_error" field.</summary>
    public const int IsErrorFieldNumber = 5;
    private bool isError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompleteTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompleteTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Task, other.Task)) return false;
      if (!object.Equals(WorkerConfiguration, other.WorkerConfiguration)) return false;
      if (IsError != other.IsError) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (task_ != null) hash ^= Task.GetHashCode();
      if (workerConfiguration_ != null) hash ^= WorkerConfiguration.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (task_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Task);
      }
      if (workerConfiguration_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WorkerConfiguration);
      }
      if (IsError != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsError);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      if (workerConfiguration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WorkerConfiguration);
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompleteTask other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.task_ != null) {
        if (task_ == null) {
          task_ = new global::Org.Roylance.Yadel.Task();
        }
        Task.MergeFrom(other.Task);
      }
      if (other.workerConfiguration_ != null) {
        if (workerConfiguration_ == null) {
          workerConfiguration_ = new global::Org.Roylance.Yadel.WorkerConfiguration();
        }
        WorkerConfiguration.MergeFrom(other.WorkerConfiguration);
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (task_ == null) {
              task_ = new global::Org.Roylance.Yadel.Task();
            }
            input.ReadMessage(task_);
            break;
          }
          case 26: {
            if (workerConfiguration_ == null) {
              workerConfiguration_ = new global::Org.Roylance.Yadel.WorkerConfiguration();
            }
            input.ReadMessage(workerConfiguration_);
            break;
          }
          case 40: {
            IsError = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllDags : pb::IMessage<AllDags> {
    private static readonly pb::MessageParser<AllDags> _parser = new pb::MessageParser<AllDags>(() => new AllDags());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllDags> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Org.Roylance.Yadel.YadelModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllDags() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllDags(AllDags other) : this() {
      dags_ = other.dags_.Clone();
      workers_ = other.workers_.Clone();
      includeUnprocessed_ = other.includeUnprocessed_;
      includeFileSaved_ = other.includeFileSaved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllDags Clone() {
      return new AllDags(this);
    }

    /// <summary>Field number for the "dags" field.</summary>
    public const int DagsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.Dag> _repeated_dags_codec
        = pb::FieldCodec.ForMessage(10, global::Org.Roylance.Yadel.Dag.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.Dag> dags_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.Dag>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.Dag> Dags {
      get { return dags_; }
    }

    /// <summary>Field number for the "workers" field.</summary>
    public const int WorkersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Org.Roylance.Yadel.WorkerConfiguration> _repeated_workers_codec
        = pb::FieldCodec.ForMessage(18, global::Org.Roylance.Yadel.WorkerConfiguration.Parser);
    private readonly pbc::RepeatedField<global::Org.Roylance.Yadel.WorkerConfiguration> workers_ = new pbc::RepeatedField<global::Org.Roylance.Yadel.WorkerConfiguration>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Org.Roylance.Yadel.WorkerConfiguration> Workers {
      get { return workers_; }
    }

    /// <summary>Field number for the "include_unprocessed" field.</summary>
    public const int IncludeUnprocessedFieldNumber = 3;
    private bool includeUnprocessed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeUnprocessed {
      get { return includeUnprocessed_; }
      set {
        includeUnprocessed_ = value;
      }
    }

    /// <summary>Field number for the "include_file_saved" field.</summary>
    public const int IncludeFileSavedFieldNumber = 4;
    private bool includeFileSaved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeFileSaved {
      get { return includeFileSaved_; }
      set {
        includeFileSaved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllDags);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllDags other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dags_.Equals(other.dags_)) return false;
      if(!workers_.Equals(other.workers_)) return false;
      if (IncludeUnprocessed != other.IncludeUnprocessed) return false;
      if (IncludeFileSaved != other.IncludeFileSaved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dags_.GetHashCode();
      hash ^= workers_.GetHashCode();
      if (IncludeUnprocessed != false) hash ^= IncludeUnprocessed.GetHashCode();
      if (IncludeFileSaved != false) hash ^= IncludeFileSaved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dags_.WriteTo(output, _repeated_dags_codec);
      workers_.WriteTo(output, _repeated_workers_codec);
      if (IncludeUnprocessed != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncludeUnprocessed);
      }
      if (IncludeFileSaved != false) {
        output.WriteRawTag(32);
        output.WriteBool(IncludeFileSaved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dags_.CalculateSize(_repeated_dags_codec);
      size += workers_.CalculateSize(_repeated_workers_codec);
      if (IncludeUnprocessed != false) {
        size += 1 + 1;
      }
      if (IncludeFileSaved != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllDags other) {
      if (other == null) {
        return;
      }
      dags_.Add(other.dags_);
      workers_.Add(other.workers_);
      if (other.IncludeUnprocessed != false) {
        IncludeUnprocessed = other.IncludeUnprocessed;
      }
      if (other.IncludeFileSaved != false) {
        IncludeFileSaved = other.IncludeFileSaved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dags_.AddEntriesFrom(input, _repeated_dags_codec);
            break;
          }
          case 18: {
            workers_.AddEntriesFrom(input, _repeated_workers_codec);
            break;
          }
          case 24: {
            IncludeUnprocessed = input.ReadBool();
            break;
          }
          case 32: {
            IncludeFileSaved = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
